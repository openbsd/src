.\"	$OpenBSD: DSA_set_method.3,v 1.8 2018/03/22 16:06:33 schwarze Exp $
.\"	OpenSSL b97fdb57 Nov 11 09:33:09 2016 +0100
.\"
.\" This file was written by Ulf Moeller <ulf@openssl.org>.
.\" Copyright (c) 2000, 2002, 2007 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 22 2018 $
.Dt DSA_SET_METHOD 3
.Os
.Sh NAME
.Nm DSA_set_default_method ,
.Nm DSA_get_default_method ,
.Nm DSA_set_method ,
.Nm DSA_new_method ,
.Nm DSA_OpenSSL
.Nd select DSA method
.Sh SYNOPSIS
.In openssl/dsa.h
.In openssl/engine.h
.Ft void
.Fo DSA_set_default_method
.Fa "const DSA_METHOD *meth"
.Fc
.Ft const DSA_METHOD *
.Fn DSA_get_default_method void
.Ft int
.Fo DSA_set_method
.Fa "DSA *dsa"
.Fa "const DSA_METHOD *meth"
.Fc
.Ft DSA *
.Fo DSA_new_method
.Fa "ENGINE *engine"
.Fc
.Ft DSA_METHOD *
.Fn DSA_OpenSSL void
.Sh DESCRIPTION
A
.Vt DSA_METHOD
specifies the functions that OpenSSL uses for DSA operations.
By modifying the method, alternative implementations such as hardware
accelerators may be used.
See the
.Sx CAVEATS
section for how these DSA API functions are affected by the use of
.Xr engine 3
API calls.
.Pp
Initially, the default
.Vt DSA_METHOD
is the OpenSSL internal implementation, as returned by
.Fn DSA_OpenSSL .
.Pp
.Fn DSA_set_default_method
makes
.Fa meth
the default method for all
.Vt DSA
structures created later.
.Sy Note :
this is true only whilst no
.Vt ENGINE
has been set as a default for DSA, so this function is no longer
recommended.
.Pp
.Fn DSA_get_default_method
returns a pointer to the current default
.Vt DSA_METHOD .
However, the meaningfulness of this result is dependent on whether the
.Xr engine 3
API is being used, so this function is no longer recommended.
.Pp
.Fn DSA_set_method
selects
.Fa meth
to perform all operations using the key
.Fa dsa .
This will replace the
.Vt DSA_METHOD
used by the DSA key and if the previous method was supplied by an
.Vt ENGINE ,
the handle to that
.Vt ENGINE
will be released during the change.
It is possible to have DSA keys that only work with certain
.Vt DSA_METHOD
implementations (e.g. from an
.Vt ENGINE
module that supports embedded hardware-protected keys),
and in such cases attempting to change the
.Vt DSA_METHOD
for the key can have unexpected results.
.Pp
.Fn DSA_new_method
allocates and initializes a
.Vt DSA
structure so that
.Fa engine
will be used for the DSA operations.
If
.Fa engine
is
.Dv NULL ,
the default engine for DSA operations is used and, if no
default
.Vt ENGINE
is set, the
.Vt DSA_METHOD
controlled by
.Fn DSA_set_default_method
is used.
.Pp
The
.Vt DSA_METHOD
structure is defined as follows:
.Bd -literal
struct
{
     /* name of the implementation */
	const char *name;

     /* sign */
	DSA_SIG *(*dsa_do_sign)(const unsigned char *dgst, int dlen,
                                 DSA *dsa);

     /* pre-compute k^-1 and r */
	int (*dsa_sign_setup)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                                 BIGNUM **rp);

     /* verify */
	int (*dsa_do_verify)(const unsigned char *dgst, int dgst_len,
                                 DSA_SIG *sig, DSA *dsa);

     /* compute rr = a1^p1 * a2^p2 mod m (May be NULL for some
                                          implementations) */
	int (*dsa_mod_exp)(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1,
                                 BIGNUM *a2, BIGNUM *p2, BIGNUM *m,
                                 BN_CTX *ctx, BN_MONT_CTX *in_mont);

     /* compute r = a ^ p mod m (May be NULL for some implementations) */
        int (*bn_mod_exp)(DSA *dsa, BIGNUM *r, BIGNUM *a,
                                 const BIGNUM *p, const BIGNUM *m,
                                 BN_CTX *ctx, BN_MONT_CTX *m_ctx);

     /* called at DSA_new */
        int (*init)(DSA *DSA);

     /* called at DSA_free */
        int (*finish)(DSA *DSA);

        int flags;

        char *app_data; /* ?? */

} DSA_METHOD;
.Ed
.Sh RETURN VALUES
.Fn DSA_OpenSSL
and
.Fn DSA_get_default_method
return pointers to the respective
.Vt DSA_METHOD Ns s .
.Pp
.Fn DSA_set_method
returns non-zero if the provided
.Fa meth
was successfully set as the method for
.Fa dsa
(including unloading the
.Vt ENGINE
handle if the previous method was supplied by an
.Vt ENGINE ) .
.Pp
.Fn DSA_new_method
returns
.Dv NULL
and sets an error code that can be obtained by
.Xr ERR_get_error 3
if the allocation fails.
Otherwise it returns a pointer to the newly allocated structure.
.Sh SEE ALSO
.Xr DSA_meth_new 3 ,
.Xr DSA_new 3
.Sh HISTORY
.Fn DSA_set_default_method ,
.Fn DSA_get_default_method ,
.Fn DSA_set_method ,
.Fn DSA_new_method ,
and
.Fn DSA_OpenSSL
first appeared in OpenSSL 0.9.5 and have been available since
.Ox 2.7 .
.Sh CAVEATS
As of version 0.9.7, DSA_METHOD implementations are grouped together
with other algorithmic APIs (e.g. RSA_METHOD, EVP_CIPHER) in
.Vt ENGINE
modules.
If a default
.Vt ENGINE
is specified for DSA functionality using an
.Xr engine 3
API function, that will override any DSA defaults set using the DSA API
.Pq i.e. DSA_set_default_method .
For this reason, the
.Xr engine 3
API is the recommended way to control default implementations for
use in DSA and other cryptographic algorithms.
