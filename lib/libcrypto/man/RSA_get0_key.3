.\" $OpenBSD: RSA_get0_key.3,v 1.4 2018/03/23 23:18:17 schwarze Exp $
.\" selective merge up to: OpenSSL 665d899f Aug 2 02:19:43 2017 +0800
.\"
.\" This file was written by Richard Levitte <levitte@openssl.org>
.\" Copyright (c) 2016 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: March 23 2018 $
.Dt RSA_GET0_KEY 3
.Os
.Sh NAME
.Nm RSA_get0_key ,
.Nm RSA_set0_key ,
.Nm RSA_get0_factors ,
.Nm RSA_set0_factors ,
.Nm RSA_get0_crt_params ,
.Nm RSA_set0_crt_params ,
.Nm RSA_clear_flags ,
.Nm RSA_test_flags ,
.Nm RSA_set_flags
.Nd get and set data in an RSA object
.Sh SYNOPSIS
.In openssl/rsa.h
.Ft void
.Fo RSA_get0_key
.Fa "const RSA *r"
.Fa "const BIGNUM **n"
.Fa "const BIGNUM **e"
.Fa "const BIGNUM **d"
.Fc
.Ft int
.Fo RSA_set0_key
.Fa "RSA *r"
.Fa "BIGNUM *n"
.Fa "BIGNUM *e"
.Fa "BIGNUM *d"
.Fc
.Ft void
.Fo RSA_get0_factors
.Fa "const RSA *r"
.Fa "const BIGNUM **p"
.Fa "const BIGNUM **q"
.Fc
.Ft int
.Fo RSA_set0_factors
.Fa "RSA *r"
.Fa "BIGNUM *p"
.Fa "BIGNUM *q"
.Fc
.Ft void
.Fo RSA_get0_crt_params
.Fa "const RSA *r"
.Fa "const BIGNUM **dmp1"
.Fa "const BIGNUM **dmq1"
.Fa "const BIGNUM **iqmp"
.Fc
.Ft int
.Fo RSA_set0_crt_params
.Fa "RSA *r"
.Fa "BIGNUM *dmp1"
.Fa "BIGNUM *dmq1"
.Fa "BIGNUM *iqmp"
.Fc
.Ft void
.Fo RSA_clear_flags
.Fa "RSA *r"
.Fa "int flags"
.Fc
.Ft int
.Fo RSA_test_flags
.Fa "const RSA *r"
.Fa "int flags"
.Fc
.Ft void
.Fo RSA_set_flags
.Fa "RSA *r"
.Fa "int flags"
.Fc
.Sh DESCRIPTION
An
.Vt RSA
object contains the components for the public and private key.
.Fa n
is the modulus common to both public and private key,
.Fa e
is the public exponent and
.Fa d
is the private exponent.
.Fa p ,
.Fa q ,
.Fa dmp1 ,
.Fa dmq1 ,
and
.Fa iqmp
are the factors for the second representation of a private key
(see PKCS#1 section 3 Key Types), where
.Fa p
and
.Fa q
are the first and second factor of
.Fa n .
.Fa dmp1 ,
.Fa dmq1 ,
and
.Fa iqmp
are the exponents and coefficient for CRT calculations.
.Pp
The
.Fa n ,
.Fa e ,
and
.Fa d
parameters can be obtained by calling
.Fn RSA_get0_key .
If they have not been set yet, then
.Pf * Fa n ,
.Pf * Fa e ,
and
.Pf * Fa d
are set to
.Dv NULL .
Otherwise, they are set to pointers to the internal representations
of the values that should not be freed by the caller.
.Pp
The
.Fa n ,
.Fa e ,
and
.Fa d
parameter values can be set by calling
.Fn RSA_set0_key .
The values
.Fa n
and
.Fa e
must be
.Pf non- Dv NULL
the first time this function is called on a given
.Vt RSA
object.
The value
.Fa d
may be
.Dv NULL .
On subsequent calls, any of these values may be
.Dv NULL ,
which means that the corresponding field is left untouched.
Calling this function transfers the memory management of the values to
the RSA object.
Therefore, the values that have been passed in
should not be freed by the caller.
.Pp
In a similar fashion, the
.Fa p
and
.Fa q
parameters can be obtained and set with
.Fn RSA_get0_factors
and
.Fn RSA_set0_factors ,
and the
.Fa dmp1 ,
.Fa dmq1 ,
and
.Fa iqmp
parameters can be obtained and set with
.Fn RSA_get0_crt_params
and
.Fn RSA_set0_crt_params .
.Pp
For
.Fn RSA_get0_key ,
.Fn RSA_get0_factors ,
and
.Fn RSA_get0_crt_params ,
.Dv NULL
value
.Vt BIGNUM **
output arguments are permitted.
The functions
ignore
.Dv NULL
arguments but return values for other,
.Pf non- Dv NULL ,
arguments.
.Pp
Values retrieved with
.Fn RSA_get0_key ,
.Fn RSA_get0_factors ,
and
.Fn RSA_get0_crt_params
are owned by the
.Vt RSA
object used in the call and may therefore
.Em not
be passed to
.Fn RSA_set0_key ,
.Fn RSA_set0_factors ,
or
.Fn RSA_set0_crt_params .
If needed, duplicate the received value using
.Xr BN_dup 3
and pass the duplicate.
.Pp
.Fn RSA_clear_flags
clears the specified
.Fa flags
in
.Fa r .
.Fn RSA_test_flags
tests the
.Fa flags
in
.Fa r .
.Fn RSA_set_flags
sets the
.Fa flags
in
.Fa r ;
any flags already set remain set.
For all three functions, multiple flags can be passed in one call,
OR'ed together bitwise.
.Sh RETURN VALUES
.Fn RSA_set0_key ,
.Fn RSA_set0_factors ,
and
.Fn RSA_set0_crt_params
return 1 on success or 0 on failure.
.Pp
.Fn RSA_test_flags
returns those of the given
.Fa flags
currently set in
.Fa r
or 0 if none of the given
.Fa flags
are set.
.Sh SEE ALSO
.Xr RSA_check_key 3 ,
.Xr RSA_generate_key 3 ,
.Xr RSA_new 3 ,
.Xr RSA_print 3 ,
.Xr RSA_size 3
.Sh HISTORY
These functions first appeared in OpenSSL 1.1.0
and have been available since
.Ox 6.3 .
