.\" $OpenBSD: X509_STORE_CTX_new.3,v 1.19 2019/06/06 01:06:59 schwarze Exp $
.\" full merge up to: OpenSSL 186bb907 Apr 13 11:05:13 2015 -0700
.\" selective merge up to: OpenSSL 7643a172 Apr 21 13:35:51 2017 +0200
.\"
.\" This file was written by Dr. Stephen Henson <steve@openssl.org>
.\" and Rich Salz <rsalz@openssl.org>.
.\" Copyright (c) 2009, 2015, 2016 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 6 2019 $
.Dt X509_STORE_CTX_NEW 3
.Os
.Sh NAME
.Nm X509_STORE_CTX_new ,
.Nm X509_STORE_CTX_cleanup ,
.Nm X509_STORE_CTX_free ,
.Nm X509_STORE_CTX_init ,
.Nm X509_STORE_CTX_get0_store ,
.Nm X509_STORE_CTX_set0_trusted_stack ,
.Nm X509_STORE_CTX_trusted_stack ,
.Nm X509_STORE_CTX_set_cert ,
.\" X509_STORE_CTX_get0_chain moved to X509_STORE_CTX_get_error(3)
.Nm X509_STORE_CTX_set_chain ,
.Nm X509_STORE_CTX_set0_crls ,
.Nm X509_STORE_CTX_get0_param ,
.Nm X509_STORE_CTX_set0_param ,
.Nm X509_STORE_CTX_get0_untrusted ,
.Nm X509_STORE_CTX_set0_untrusted ,
.Nm X509_STORE_CTX_set_default
.Nd X509_STORE_CTX initialisation
.Sh SYNOPSIS
.In openssl/x509_vfy.h
.Ft X509_STORE_CTX *
.Fn X509_STORE_CTX_new void
.Ft void
.Fo X509_STORE_CTX_cleanup
.Fa "X509_STORE_CTX *ctx"
.Fc
.Ft void
.Fo X509_STORE_CTX_free
.Fa "X509_STORE_CTX *ctx"
.Fc
.Ft int
.Fo X509_STORE_CTX_init
.Fa "X509_STORE_CTX *ctx"
.Fa "X509_STORE *store"
.Fa "X509 *x509"
.Fa "STACK_OF(X509) *chain"
.Fc
.Ft X509_STORE *
.Fo X509_STORE_CTX_get0_store
.Fa "X509_STORE_CTX *ctx"
.Fc
.Ft void
.Fo X509_STORE_CTX_set0_trusted_stack
.Fa "X509_STORE_CTX *ctx"
.Fa "STACK_OF(X509) *sk"
.Fc
.Ft void
.Fo X509_STORE_CTX_trusted_stack
.Fa "X509_STORE_CTX *ctx"
.Fa "STACK_OF(X509) *sk"
.Fc
.Ft void
.Fo X509_STORE_CTX_set_cert
.Fa "X509_STORE_CTX *ctx"
.Fa "X509 *x"
.Fc
.Ft void
.Fo X509_STORE_CTX_set_chain
.Fa "X509_STORE_CTX *ctx"
.Fa "STACK_OF(X509) *sk"
.Fc
.Ft void
.Fo X509_STORE_CTX_set0_crls
.Fa "X509_STORE_CTX *ctx"
.Fa "STACK_OF(X509_CRL) *sk"
.Fc
.Ft X509_VERIFY_PARAM *
.Fo X509_STORE_CTX_get0_param
.Fa "X509_STORE_CTX *ctx"
.Fc
.Ft void
.Fo X509_STORE_CTX_set0_param
.Fa "X509_STORE_CTX *ctx"
.Fa "X509_VERIFY_PARAM *param"
.Fc
.Ft int
.Fo X509_STORE_CTX_set_default
.Fa "X509_STORE_CTX *ctx"
.Fa "const char *name"
.Fc
.Ft STACK_OF(X509)*
.Fo X509_STORE_CTX_get0_untrusted
.Fa "X509_STORE_CTX *ctx"
.Fc
.Ft void
.Fo X509_STORE_CTX_set0_untrusted
.Fa "X509_STORE_CTX *ctx"
.Fa "STACK_OF(X509) *sk"
.Fc
.Sh DESCRIPTION
These functions initialise an
.Vt X509_STORE_CTX
structure for subsequent use by
.Xr X509_verify_cert 3 .
.Pp
.Fn X509_STORE_CTX_new
returns a newly initialised
.Vt X509_STORE_CTX
structure.
.Pp
.Fn X509_STORE_CTX_cleanup
internally cleans up an
.Vt X509_STORE_CTX
structure.
The context can then be reused with a new call to
.Fn X509_STORE_CTX_init .
.Pp
.Fn X509_STORE_CTX_free
completely frees up
.Fa ctx .
After this call
.Fa ctx
is no longer valid.
If
.Fa ctx
is a
.Dv NULL
pointer, no action occurs.
.Pp
.Fn X509_STORE_CTX_init
sets up
.Fa ctx
for a subsequent verification operation.
The trusted certificate store is set to
.Fa store ,
the end entity certificate to be verified is set to
.Fa x509
and a set of additional certificates (which will be untrusted but may be
used to build the chain) in
.Fa chain .
Any or all of the
.Fa store ,
.Fa x509 ,
and
.Fa chain
parameters can be
.Dv NULL .
.Pp
.Fn X509_STORE_CTX_get0_store
returns an internal pointer to the trusted certificate
.Fa store
that was set with
.Fn X509_STORE_CTX_init .
.Pp
.Fn X509_STORE_CTX_set0_trusted_stack
sets the set of trusted certificates of
.Fa ctx
to
.Fa sk .
This is an alternative way of specifying trusted certificates instead of
using an
.Vt X509_STORE .
.Fn X509_STORE_CTX_trusted_stack
is a deprecated alias for
.Fn X509_STORE_CTX_set0_trusted_stack .
.Pp
.Fn X509_STORE_CTX_set_cert
sets the certificate to be verified in
.Fa ctx
to
.Fa x .
.Pp
.Fn X509_STORE_CTX_set_chain
sets the additional certificate chain used by
.Fa ctx
to
.Fa sk .
.Pp
.Fn X509_STORE_CTX_set0_crls
sets a set of CRLs to use to aid certificate verification to
.Fa sk .
These CRLs will only be used if CRL verification is enabled in the
associated
.Vt X509_VERIFY_PARAM
structure.
This might be used where additional "useful" CRLs are supplied as part
of a protocol, for example in a PKCS#7 structure.
.Pp
.Fn X509_STORE_CTX_get0_param
retrieves an internal pointer to the verification parameters associated
with
.Fa ctx .
.Pp
.Fn X509_STORE_CTX_set0_param
sets the internal verification parameter pointer to
.Fa param .
After this call
.Fa param
should not be used.
.Pp
.Fn X509_STORE_CTX_set_default
looks up and sets the default verification method to
.Fa name .
This uses the function
.Xr X509_VERIFY_PARAM_lookup 3
to find an appropriate set of parameters from
.Fa name .
.Pp
.Fn X509_STORE_CTX_get0_untrusted
retrieves an internal pointer
to the stack of untrusted certificates associated with
.Fa ctx .
.Pp
.Fn X509_STORE_CTX_set0_untrusted
sets the internal pointer
to the stack of untrusted certificates associated with
.Fa ctx
to
.Fa sk .
.Pp
The certificates and CRLs in a store are used internally and should
.Sy not
be freed up until after the associated
.Vt X509_STORE_CTX
is freed.
Legacy applications might implicitly use an
.Vt X509_STORE_CTX
like this:
.Bd -literal -offset indent
X509_STORE_CTX ctx;
X509_STORE_CTX_init(&ctx, store, cert, chain);
.Ed
.Pp
This is
.Sy not
recommended in new applications.
They should instead do:
.Bd -literal -offset indent
X509_STORE_CTX *ctx;
ctx = X509_STORE_CTX_new();
if (ctx == NULL)
	/* Bad error */
X509_STORE_CTX_init(ctx, store, cert, chain);
.Ed
.Sh RETURN VALUES
.Fn X509_STORE_CTX_new
returns a newly allocated context or
.Dv NULL
if an error occurred.
.Pp
.Fn X509_STORE_CTX_init
returns 1 for success or 0 if an error occurred.
.Pp
.Fn X509_STORE_CTX_get0_store
returns a pointer to the trusted certificate store or
.Dv NULL
if
.Fa ctx
was not initialised.
.Pp
.Fn X509_STORE_CTX_get0_param
returns a pointer to an
.Vt X509_VERIFY_PARAM
structure or
.Dv NULL
if an error occurred.
.Pp
.Fn X509_STORE_CTX_set_default
returns 1 for success or 0 if an error occurred.
.Pp
.Fn X509_STORE_CTX_get0_untrusted
returns an internal pointer.
.Sh SEE ALSO
.Xr X509_CRL_new 3 ,
.Xr X509_STORE_CTX_get_error 3 ,
.Xr X509_STORE_CTX_get_ex_new_index 3 ,
.Xr X509_STORE_new 3 ,
.Xr X509_STORE_set1_param 3 ,
.Xr X509_verify_cert 3 ,
.Xr X509_VERIFY_PARAM_set_flags 3
.Sh HISTORY
.Fn X509_STORE_CTX_cleanup ,
.Fn X509_STORE_CTX_init ,
.Fn X509_STORE_CTX_set_cert ,
and
.Fn X509_STORE_CTX_set_chain
first appeared in SSLeay 0.8.0 and have been available since
.Ox 2.4 .
.Pp
.Fn X509_STORE_CTX_new
and
.Fn X509_STORE_CTX_free
first appeared in OpenSSL 0.9.5 and have been available since
.Ox 2.7 .
.Pp
.Fn X509_STORE_CTX_trusted_stack
first appeared in OpenSSL 0.9.6 and has been available since
.Ox 2.9 .
.Pp
.Fn X509_STORE_CTX_set0_crls ,
.Fn X509_STORE_CTX_get0_param ,
.Fn X509_STORE_CTX_set0_param ,
and
.Fn X509_STORE_CTX_set_default
first appeared in OpenSSL 0.9.8 and have been available since
.Ox 4.5 .
.Pp
.Fn X509_STORE_CTX_get0_store
first appeared in OpenSSL 1.0.2.
.Fn X509_STORE_CTX_set0_trusted_stack ,
.Fn X509_STORE_CTX_get0_untrusted ,
and
.Fn X509_STORE_CTX_set0_untrusted
first appeared in OpenSSL 1.1.0.
These functions have been available since
.Ox 6.3 .
.Sh BUGS
The certificates and CRLs in a context are used internally and should
.Sy not
be freed up until after the associated
.Vt X509_STORE_CTX
is freed.
Copies should be made or reference counts increased instead.
