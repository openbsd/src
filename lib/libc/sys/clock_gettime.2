.\"	$OpenBSD: clock_gettime.2,v 1.30 2019/01/18 05:27:25 cheloha Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: January 18 2019 $
.Dt CLOCK_GETTIME 2
.Os
.Sh NAME
.Nm clock_gettime ,
.Nm clock_settime ,
.Nm clock_getres
.Nd get/set/calibrate date and time
.Sh SYNOPSIS
.In time.h
.Ft int
.Fn clock_gettime "clockid_t clock_id" "struct timespec *tp"
.Ft int
.Fn clock_settime "clockid_t clock_id" "const struct timespec *tp"
.Ft int
.Fn clock_getres "clockid_t clock_id" "struct timespec *tp"
.Sh DESCRIPTION
The
.Fn clock_gettime
and
.Fn clock_settime
functions
allow the calling process to retrieve or set the value used by a clock
which is specified by
.Fa clock_id .
.Pp
.Fa clock_id
can be a value from
.Xr clock_getcpuclockid 3
or
.Xr pthread_getcpuclockid 3 ,
or one of the following predefined values:
.Bl -tag -width CLOCK_MONOTONIC
.It Dv CLOCK_REALTIME
time that increments as a wall clock should
.It Dv CLOCK_PROCESS_CPUTIME_ID
time that increments when the CPU is running in user or kernel mode
on behalf of the calling process
.It Dv CLOCK_THREAD_CPUTIME_ID
time that increments when the CPU is running in user or kernel mode
on behalf of the calling thread
.It Dv CLOCK_MONOTONIC
time that increments as a wall clock should but whose absolute value
is meaningless and cannot jump,
providing accurate realtime interval measurement,
even across suspend and resume
.It Dv CLOCK_BOOTTIME
time whose absolute value is the time that has elapsed since the
system was booted
.It Dv CLOCK_UPTIME
time whose absolute value is the time the system has been running
and not suspended,
providing accurate uptime measurement, both absolute and interval
.El
.Pp
The structure pointed to by
.Fa tp
is defined in
.In sys/time.h
as:
.Bd -literal -offset indent
struct timespec {
	time_t	tv_sec;		/* seconds */
	long	tv_nsec;	/* and nanoseconds */
};
.Ed
.Pp
Only the
.Dv CLOCK_REALTIME
clock can be set, and only the superuser may do so.
If the system securelevel is greater than 1 (see
.Xr init 8 ) ,
the time may only be advanced.
This limitation is imposed to prevent a malicious superuser
from setting arbitrary time stamps on files.
The system time can still be adjusted backwards using the
.Xr adjtime 2
system call even when the system is secure.
.Pp
The resolution (granularity) of a clock is returned by the
.Fn clock_getres
call.
This value is placed in a (non-null)
.Fa *tp .
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
.Fn clock_gettime ,
.Fn clock_settime ,
and
.Fn clock_getres
will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa clock_id
is not a valid value.
.It Bq Er EFAULT
The
.Fa tp
argument address referenced invalid memory.
.El
.Pp
In addition,
.Fn clock_settime
may return the following errors:
.Bl -tag -width Er
.It Bq Er EPERM
A user other than the superuser attempted to set the time.
.It Bq Er EINVAL
.Fa clock_id
specifies a clock that isn't settable,
.Fa tp
specifies a nanosecond value less than zero or greater than or equal to
1000 million,
or a value outside the range of the specified clock.
.El
.Sh SEE ALSO
.Xr date 1 ,
.Xr adjtime 2 ,
.Xr getitimer 2 ,
.Xr gettimeofday 2 ,
.Xr clock_getcpuclockid 3 ,
.Xr ctime 3 ,
.Xr pthread_getcpuclockid 3
.Sh STANDARDS
The
.Fn clock_getres ,
.Fn clock_gettime ,
and
.Fn clock_settime
functions conform to
.St -p1003.1-2008 .
.Pp
The
.Dv CLOCK_BOOTTIME
and
.Dv CLOCK_UPTIME
clocks are extensions to that.
.Sh HISTORY
The
.Dv CLOCK_PROCESS_CPUTIME_ID
and
.Dv CLOCK_THREAD_CPUTIME_ID
clocks appeared in
.Ox 5.4 .
The
.Dv CLOCK_UPTIME
clock first appeared in
.Fx 7.0
and was added to
.Ox
in
.Ox 5.5 .
The
.Dv CLOCK_BOOTTIME
clock first appeared in
Linux 2.6.39
and was added to
.Ox
in
.Ox 6.3 .
