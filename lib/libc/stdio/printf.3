.\"	$OpenBSD: printf.3,v 1.79 2019/01/16 12:55:49 schwarze Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)printf.3	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: January 16 2019 $
.Dt PRINTF 3
.Os
.Sh NAME
.Nm printf ,
.Nm fprintf ,
.Nm sprintf ,
.Nm snprintf ,
.Nm asprintf ,
.Nm dprintf ,
.Nm vprintf ,
.Nm vfprintf ,
.Nm vsprintf ,
.Nm vsnprintf ,
.Nm vasprintf ,
.Nm vdprintf
.Nd formatted output conversion
.Sh SYNOPSIS
.In stdio.h
.Ft int
.Fn printf "const char *format" ...
.Ft int
.Fn fprintf "FILE *stream" "const char *format" ...
.Ft int
.Fn sprintf "char *str" "const char *format" ...
.Ft int
.Fn snprintf "char *str" "size_t size" "const char *format" ...
.Ft int
.Fn asprintf "char **ret" "const char *format" ...
.Ft int
.Fn dprintf "int fd" "const char * restrict format" ...
.In stdarg.h
.In stdio.h
.Ft int
.Fn vprintf "const char *format" "va_list ap"
.Ft int
.Fn vfprintf "FILE *stream" "const char *format" "va_list ap"
.Ft int
.Fn vsprintf "char *str" "const char *format" "va_list ap"
.Ft int
.Fn vsnprintf "char *str" "size_t size" "const char *format" "va_list ap"
.Ft int
.Fn vasprintf "char **ret" "const char *format" "va_list ap"
.Ft int
.Fn vdprintf "int fd" "const char * restrict format" "va_list ap"
.Sh DESCRIPTION
The
.Fn printf
family of functions produce output according to the given
.Fa format
as described below.
This format may contain
.Dq conversion specifiers ;
the results of such conversions, if any, depend on the arguments
following the
.Fa format
string.
.Pp
The
.Fn printf
and
.Fn vprintf
functions write output to the standard output stream,
.Em stdout ;
.Fn fprintf
and
.Fn vfprintf
write output to the supplied stream pointer
.Fa stream ;
.Fn dprintf
and
.Fn vdprintf
write output to the given file descriptor;
.Fn sprintf ,
.Fn snprintf ,
.Fn vsprintf ,
and
.Fn vsnprintf
write to the character string
.Fa str ;
.Fn asprintf
and
.Fn vasprintf
write to a dynamically allocated string that is stored in
.Fa ret .
.Pp
These functions write the output under the control of a
.Fa format
string that specifies how subsequent arguments
(or arguments accessed via the variable-length argument facilities of
.Xr stdarg 3 )
are converted for output.
.Pp
.Fn snprintf
and
.Fn vsnprintf
will write at most
.Fa size Ns \-1
of the characters printed into the output string
(the
.Fa size Ns 'th
character then gets the terminating
.Ql \e0 ) ;
if the return value is greater than or equal to the
.Fa size
argument, the string was too short
and some of the printed characters were discarded.
If
.Fa size
is zero,
.Fa str
may be a null pointer and no characters will be written;
the number of bytes that would have been written excluding the terminating
.Ql \e0
byte, or \-1 on error, will be returned.
.Pp
.Fn sprintf
and
.Fn vsprintf
effectively assume an infinite
.Fa size .
.Pp
The format string is composed of zero or more directives:
ordinary
.\" multibyte
characters (not
.Cm % ) ,
which are copied unchanged to the output stream,
and conversion specifications, each of which results
in fetching zero or more subsequent arguments.
Each conversion specification is introduced by the character
.Cm % .
The arguments must correspond properly (after type promotion)
with the conversion specifier.
After the
.Cm % ,
the following appear in sequence:
.Bl -bullet
.It
An optional field, consisting of a decimal digit string followed by a
.Cm $
specifying the next argument to access.
If this field is not provided, the argument following the last
argument accessed will be used.
Arguments are numbered starting at
.Cm 1 .
.It
Zero or more of the following flags:
.Bl -hyphen
.It
A hash
.Sq Cm #
character
specifying that the value should be converted to an
.Dq alternate form .
For
.Cm o
conversions, the precision of the number is increased to force the first
character of the output string to a zero (except if a zero value is printed
with an explicit precision of zero).
For
.Cm x
and
.Cm X
conversions, a non-zero result has the string
.Ql 0x
(or
.Ql 0X
for
.Cm X
conversions) prepended to it.
For
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
and
.Cm G
conversions, the result will always contain a decimal point, even if no
digits follow it (normally, a decimal point appears in the results of
those conversions only if a digit follows).
For
.Cm g
and
.Cm G
conversions, trailing zeros are not removed from the result as they
would otherwise be.
For all other formats, behaviour is undefined.
.It
A zero
.Sq Cm \&0
character specifying zero padding.
For all conversions except
.Cm n ,
the converted value is padded on the left with zeros rather than blanks.
If a precision is given with a numeric conversion
.Pf ( Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
and
.Cm X ) ,
the
.Sq Cm \&0
flag is ignored.
.It
A negative field width flag
.Sq Cm \-
indicates the converted value is to be left adjusted on the field boundary.
Except for
.Cm n
conversions, the converted value is padded on the right with blanks,
rather than on the left with blanks or zeros.
A
.Sq Cm \-
overrides a
.Sq Cm \&0
if both are given.
.It
A space, specifying that a blank should be left before a positive number
produced by a signed conversion
.Pf ( Cm d ,
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
.Cm G ,
or
.Cm i ) .
.It
A
.Sq Cm +
character specifying that a sign always be placed before a
number produced by a signed conversion.
A
.Sq Cm +
overrides a space if both are used.
.El
.It
An optional decimal digit string specifying a minimum field width.
If the converted value has fewer characters than the field width, it will
be padded with spaces on the left (or right, if the left-adjustment
flag has been given) to fill out
the field width.
.It
An optional precision, in the form of a period
.Sq Cm \&.
followed by an
optional digit string.
If the digit string is omitted, the precision is taken as zero.
This gives the minimum number of digits to appear for
.Cm d ,
.Cm i ,
.Cm o ,
.Cm u ,
.Cm x ,
and
.Cm X
conversions, the number of digits to appear after the decimal-point for
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
and
.Cm F
conversions, the maximum number of significant digits for
.Cm g
and
.Cm G
conversions, or the maximum number of characters to be printed from a
string for
.Cm s
conversions.
.It
An optional length modifier, that specifies the size of the argument.
The following length modifiers are valid for the
.Cm d , i , n ,
.Cm o , u , x ,
or
.Cm X
conversions:
.Bl -column "(deprecated)" "signed char" "unsigned long long" "long long *"
.It Sy Modifier Ta Sy "d, i" Ta Sy "o, u, x, X" Ta Sy n
.It hh Ta "signed char" Ta "unsigned char" Ta "signed char *"
.It h Ta short Ta "unsigned short" Ta "short *"
.It "l (ell)" Ta long Ta "unsigned long" Ta "long *"
.It "ll (ell ell)" Ta "long long" Ta "unsigned long long" Ta "long long *"
.It j Ta intmax_t Ta uintmax_t Ta "intmax_t *"
.It t Ta ptrdiff_t Ta (see note) Ta "ptrdiff_t *"
.It z Ta "(see note)" Ta size_t Ta "(see note)"
.It "q (deprecated)" Ta quad_t Ta u_quad_t Ta "quad_t *"
.El
.Pp
Note:
the
.Cm t
modifier, when applied to an
.Cm o , u , x ,
or
.Cm X
conversion, indicates that the argument is of an unsigned type
equivalent in size to a
.Vt ptrdiff_t .
The
.Cm z
modifier, when applied to a
.Cm d
or
.Cm i
conversion, indicates that the argument is of a signed type equivalent in
size to a
.Vt size_t .
Similarly, when applied to an
.Cm n
conversion, it indicates that the argument is a pointer to a signed type
equivalent in size to a
.Vt size_t .
.Pp
The following length modifiers are valid for the
.Cm a ,
.Cm A ,
.Cm e ,
.Cm E ,
.Cm f ,
.Cm F ,
.Cm g ,
or
.Cm G
conversions:
.Bl -column "Modifier" "e, E, f, F, g, G"
.It Sy Modifier Ta Sy "e, E, f, F, g, G"
.It "l (ell)" Ta double (ignored: same behavior as without it)
.It L Ta "long double"
.El
.Pp
The following length modifier is valid for the
.Cm c
or
.Cm s
conversions:
.Bl -column "Modifier" "wint_t" "wchar_t *"
.It Sy Modifier Ta Sy c Ta Sy s
.It "l (ell)" Ta wint_t Ta "wchar_t *"
.El
.It
A character that specifies the type of conversion to be applied.
.El
.Pp
A field width or precision, or both, may be indicated by
an asterisk
.Ql *
or an asterisk followed by one or more decimal digits and a
.Ql $
instead of a
digit string.
In this case, an
.Li int
argument supplies the field width or precision.
A negative field width is treated as a left adjustment flag followed by a
positive field width; a negative precision is treated as though it were
missing.
If a single format directive mixes positional (nn$) and
non-positional arguments, the results are undefined.
.Pp
The conversion specifiers and their meanings are:
.Bl -tag -width "diouxX"
.It Cm diouxX
The
.Li int
(or appropriate variant) argument is converted to signed decimal
.Pf ( Cm d
and
.Cm i ) ,
unsigned octal
.Pq Cm o ,
unsigned decimal
.Pq Cm u ,
or unsigned hexadecimal
.Pf ( Cm x
and
.Cm X )
notation.
The letters
.Cm abcdef
are used for
.Cm x
conversions; the letters
.Cm ABCDEF
are used for
.Cm X
conversions.
The precision, if any, gives the minimum number of digits that must
appear; if the converted value requires fewer digits, it is padded on
the left with zeros.
.It Cm DOU
The
.Li long int
argument is converted to signed decimal, unsigned octal, or unsigned
decimal, as if the format had been
.Cm ld ,
.Cm lo ,
or
.Cm lu
respectively.
These conversion characters are deprecated, and will eventually disappear.
.It Cm eE
The
.Li double
argument is rounded and converted in the style
.Sm off
.Pf [\-]d Cm \&. No ddd Cm e No \(+-dd
.Sm on
where there is one digit before the
decimal-point character
and the number of digits after it is equal to the precision;
if the precision is missing,
it is taken as 6; if the precision is
zero, no decimal-point character appears.
An
.Cm E
conversion uses the letter
.Cm E
(rather than
.Cm e )
to introduce the exponent.
The exponent always contains at least two digits; if the value is zero,
the exponent is 00.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm e
or [-]INF
.Pq Cm E ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm e
or [-]NAN
.Pq Cm E ,
respectively.
.It Cm fF
The
.Li double
argument is rounded and converted to decimal notation in the style
.Sm off
.Pf [-]ddd Cm \&. No ddd ,
.Sm on
where the number of digits after the decimal-point character
is equal to the precision specification.
If the precision is missing, it is taken as 6; if the precision is
explicitly zero, no decimal-point character appears.
If a decimal point appears, at least one digit appears before it.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm f
or [-]INF
.Pq Cm F ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm f
or [-]NAN
.Pq Cm F ,
respectively.
.It Cm gG
The
.Li double
argument is converted in style
.Cm f
or
.Cm e
(or
.Cm E
for
.Cm G
conversions).
The precision specifies the number of significant digits.
If the precision is missing, 6 digits are given; if the precision is zero,
it is treated as 1.
Style
.Cm e
is used if the exponent from its conversion is less than -4 or greater than
or equal to the precision.
Trailing zeros are removed from the fractional part of the result; a
decimal point appears only if it is followed by at least one digit.
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm g
or [-]INF
.Pq Cm G ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm g
or [-]NAN
.Pq Cm G ,
respectively.
.It Cm aA
The
.Li double
argument is rounded and converted to hexadecimal notation in the style
.Sm off
.Pf [\-]0xh Cm \&. No hhh Cm p No [\(+-]d
.Sm on
where the number of digits after the hexadecimal-point character
is equal to the precision specification.
If the precision is missing, it is taken as enough to represent
the floating-point number exactly, and no rounding occurs.
If the precision is zero, no hexadecimal-point character appears.
The
.Cm p
is a literal character
.Ql p ,
and the exponent consists of a positive or negative sign
followed by a decimal number representing an exponent of 2.
The
.Cm A
conversion uses the prefix
.Dq Li 0X
(rather than
.Dq Li 0x ) ,
the letters
.Dq Li ABCDEF
(rather than
.Dq Li abcdef )
to represent the hex digits, and the letter
.Ql P
(rather than
.Ql p )
to separate the mantissa and exponent.
.Pp
Note that there may be multiple valid ways to represent floating-point
numbers in this hexadecimal format.
For example,
.Li 0x3.24p+0 , 0x6.48p-1
and
.Li 0xc.9p-2
are all equivalent.
The format chosen depends on the internal representation of the
number, but the implementation guarantees that the length of the
mantissa will be minimized.
Zeroes are always represented with a mantissa of 0 (preceded by a
.Ql -
if appropriate) and an exponent of
.Li +0 .
.Pp
If the argument is infinity, it will be converted to [-]inf
.Pq Cm a
or [-]INF
.Pq Cm A ,
respectively.
If the argument is not-a-number (NaN), it will be converted to
[-]nan
.Pq Cm a
or [-]NAN
.Pq Cm A ,
respectively.
.It Cm c
The
.Li int
argument is converted to an
.Li unsigned char ,
and the resulting character is written.
.It Cm s
The
.Li char *
argument is expected to be a pointer to an array of character type (pointer
to a string).
Characters from the array are written up to (but not including)
a terminating NUL character;
if a precision is specified, no more than the number specified are
written.
If a precision is given, no NUL character need be present;
if the precision is not specified, or is greater than the size
of the array, the array must contain a terminating NUL character.
.It Cm p
The
.Li void *
pointer argument is printed in hexadecimal (as if by
.Ql %#x
or
.Ql %#lx ) .
.It Cm n
The number of characters written so far is stored into the
integer indicated by the
.Li int *
(or variant) pointer argument.
No argument is converted.
.It Cm %
A
.Ql %
is written.
No argument is converted.
The complete conversion specification is
.Ql %% .
.El
.Pp
In no case does a non-existent or small field width cause truncation of
a field; if the result of a conversion is wider than the field width, the
field is expanded to contain the conversion result.
.Sh RETURN VALUES
For all these functions if an output or encoding error occurs, a value
less than 0 is returned.
.Pp
The
.Fn printf ,
.Fn dprintf ,
.Fn fprintf ,
.Fn sprintf ,
.Fn vprintf ,
.Fn vdprintf ,
.Fn vfprintf ,
.Fn vsprintf ,
.Fn asprintf ,
and
.Fn vasprintf
functions
return the number of characters printed
(not including the trailing
.Ql \e0
used to end output to strings).
.Pp
The
.Fn snprintf
and
.Fn vsnprintf
functions return the number of characters that would have
been output if the
.Fa size
were unlimited
.Po
again, not including the final
.Ql \e0 .
.Pc .
.Pp
The
.Fn asprintf
and
.Fn vasprintf
functions return the number of characters that were output
to the newly allocated string
(excluding the final
.Ql \e0 ) .
A pointer to the newly allocated string is returned in
.Fa ret ;
it should be passed to
.Xr free 3
to release the allocated storage
when it is no longer needed.
If sufficient space cannot be allocated, these functions
will return \-1.
The value of
.Fa ret
in this situation is implementation-dependent
(on
.Ox ,
.Fa ret
will be set to the null pointer, but this behavior should not be relied upon).
.Sh EXAMPLES
To print a date and time in the form `Sunday, July 3, 10:02',
where
.Va weekday
and
.Va month
are pointers to strings:
.Bd -literal -offset indent
#include <stdio.h>

fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
    weekday, month, day, hour, min);
.Ed
.Pp
To print \*(Pi
to five decimal places:
.Bd -literal -offset indent
#include <math.h>
#include <stdio.h>

fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.Ed
.Pp
To allocate a 128-byte string and print into it:
.Bd -literal -offset indent
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

char *
newfmt(const char *fmt, ...)
{
	char *p;
	va_list ap;

	if ((p = malloc(128)) == NULL)
		return (NULL);
	va_start(ap, fmt);
	(void) vsnprintf(p, 128, fmt, ap);
	va_end(ap);
	return (p);
}
.Ed
.Sh ERRORS
In addition to the errors documented for the
.Xr write 2
system call, the
.Fn printf
family of functions may fail if:
.Bl -tag -width Er
.It Bq Er EILSEQ
An invalid wide character code was encountered.
.It Bq Er ENOMEM
Insufficient storage space is available.
.It Bq Er EOVERFLOW
The return value would be too large to be represented by an
.Vt int .
.El
.Sh SEE ALSO
.Xr printf 1 ,
.Xr scanf 3 ,
.Xr wprintf 3
.Sh STANDARDS
The
.Fn fprintf ,
.Fn printf ,
.Fn snprintf ,
.Fn sprintf ,
.Fn vfprintf ,
.Fn vprintf ,
.Fn vsnprintf ,
and
.Fn vsprintf
functions conform to
.St -isoC-99 .
The
.Fn dprintf
and
.Fn vdprintf
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
The predecessors
.Fn ftoa
and
.Fn itoa
first appeared in
.At v1 .
The function
.Fn printf
first appeared in
.At v2 ,
and
.Fn fprintf
and
.Fn sprintf
in
.At v7 .
.Pp
The functions
.Fn snprintf
and
.Fn vsnprintf
first appeared in
.Bx 4.4 .
.Pp
The functions
.Fn asprintf
and
.Fn vasprintf
first appeared in the GNU C library.
This implementation first appeared in
.Ox 2.3 .
.Pp
The functions
.Fn dprintf
and
.Fn vdprintf
first appeared in
.Ox 5.3 .
.Sh CAVEATS
The conversion formats
.Cm \&%D ,
.Cm \&%O ,
and
.Cm \&%U
are not standard and
are provided only for backward compatibility.
The effect of padding the
.Cm %p
format with zeros (either by the
.Sq Cm 0
flag or by specifying a precision), and the benign effect (i.e., none)
of the
.Sq Cm #
flag on
.Cm %n
and
.Cm %p
conversions, as well as other
nonsensical combinations such as
.Cm %Ld ,
are not standard; such combinations
should be avoided.
.Pp
Because
.Fn sprintf
and
.Fn vsprintf
assume an infinitely long string,
callers must be careful not to overflow the actual space;
this is often impossible to assure.
For safety, programmers should use the
.Fn snprintf
and
.Fn asprintf
family of interfaces instead.
Unfortunately, the
.Fn asprintf
interface is not available on all systems as it is not part of
.St -isoC-99 .
.Pp
It is important never to pass a string with user-supplied data as a
format without using
.Ql %s .
An attacker can put format specifiers in the string to mangle the stack,
leading to a possible security hole.
This holds true even if the string has been built
.Dq by hand
using a function like
.Fn snprintf ,
as the resulting string may still contain user-supplied conversion specifiers
for later interpolation by
.Fn printf .
.Pp
Be sure to use the proper secure idiom:
.Bd -literal -offset indent
int ret = snprintf(buffer, sizeof(buffer), "%s", string);
if (ret == -1 || ret >= sizeof(buffer))
	goto toolong;
.Ed
.Pp
There is no way for
.Fn printf
to know the size of each argument passed.
If positional arguments are used, care must be taken to ensure that all
parameters, up to the
last positionally specified parameter, are used in the format string.
This allows for the format string to be parsed for this information.
Failure to do this will mean the code is non-portable and liable to fail.
.Pp
On systems other than
.Ox ,
the
.Dv LC_NUMERIC
.Xr locale 1
category can cause erratic output; see CAVEATS in
.Xr setlocale 3
for details.
