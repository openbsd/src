.\"	$OpenBSD: timeout.9,v 1.45 2017/11/24 02:36:53 dlg Exp $
.\"
.\" Copyright (c) 2000 Artur Grabowski <art@openbsd.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 24 2017 $
.Dt TIMEOUT_SET 9
.Os
.Sh NAME
.Nm timeout_set ,
.Nm timeout_set_proc ,
.Nm timeout_add ,
.Nm timeout_add_sec ,
.Nm timeout_add_msec ,
.Nm timeout_add_nsec ,
.Nm timeout_add_usec ,
.Nm timeout_add_tv ,
.Nm timeout_add_ts ,
.Nm timeout_add_bt ,
.Nm timeout_del ,
.Nm timeout_barrier ,
.Nm timeout_pending ,
.Nm timeout_initialized ,
.Nm timeout_triggered ,
.Nm TIMEOUT_INITIALIZER
.Nd execute a function after a specified period of time
.Sh SYNOPSIS
.In sys/types.h
.In sys/timeout.h
.Ft void
.Fn timeout_set "struct timeout *to" "void (*fn)(void *)" "void *arg"
.Ft void
.Fn timeout_set_proc "struct timeout *to" "void (*fn)(void *)" "void *arg"
.Ft int
.Fn timeout_add "struct timeout *to" "int ticks"
.Ft int
.Fn timeout_del "struct timeout *to"
.Ft void
.Fn timeout_barrier "struct timeout *to"
.Ft int
.Fn timeout_pending "struct timeout *to"
.Ft int
.Fn timeout_initialized "struct timeout *to"
.Ft int
.Fn timeout_triggered "struct timeout *to"
.Ft int
.Fn timeout_add_tv "struct timeout *to" "struct timeval *"
.Ft int
.Fn timeout_add_ts "struct timeout *to" "struct timespec *"
.Ft int
.Fn timeout_add_bt "struct timeout *to" "struct bintime *"
.Ft int
.Fn timeout_add_sec "struct timeout *to" "int sec"
.Ft int
.Fn timeout_add_msec "struct timeout *to" "int msec"
.Ft int
.Fn timeout_add_usec "struct timeout *to" "int usec"
.Ft int
.Fn timeout_add_nsec "struct timeout *to" "int nsec"
.Fn TIMEOUT_INITIALIZER "void (*fn)(void *)" "void *arg"
.Sh DESCRIPTION
The
.Nm timeout
API provides a mechanism to execute a function at a given time.
The granularity of the time is limited by the granularity of the
.Xr hardclock 9
timer which executes
.Xr hz 9
times a second.
.Pp
It is the responsibility of the caller to provide these functions with
pre-allocated timeout structures.
.Pp
The functions
.Fn timeout_set
and
.Fn timeout_set_proc
prepare the timeout structure
.Fa to
to be used in future calls to
.Fn timeout_add
and
.Fn timeout_del .
The timeout will be prepared to call the function specified by the
.Fa fn
argument with a
.Fa void *
argument given in the
.Fa arg
argument.
Once initialized, the
.Fa to
structure can be used repeatedly in
.Fn timeout_add
and
.Fn timeout_del
and does not need to be reinitialized unless
the function called and/or its argument must change.
.Pp
The function
.Fn timeout_add
schedules the execution of the
.Fa to
timeout in at least
.Fa ticks Ns /hz
seconds.
Negative values of
.Fa ticks
are illegal.
If the value is
.Sq 0
it will, in the current implementation, be treated as
.Sq 1 ,
but in the future it might cause an immediate timeout.
The timeout in the
.Fa to
argument must be already initialized by
.Fn timeout_set
or
.Fn timeout_set_proc
and may not be used in calls to
.Fn timeout_set
or
.Fn timeout_set_proc
until it has timed out or been removed with
.Fn timeout_del .
If the timeout in the
.Fa to
argument is already scheduled, the old execution time will be
replaced by the new one.
.Pp
The function
.Fn timeout_del
will cancel the timeout in the argument
.Fa to .
If the timeout has already executed or has never been added
the call will have no effect.
.Pp
.Fn timeout_barrier
ensures that any current execution of the timeout in the argument
.Fa to
has completed before returning.
If the timeout
.Fa to
has been initialised with
.Fn timeout_set
it will take the kernel lock.
.Pp
The
.Fn timeout_pending
macro can be used to check if a timeout is scheduled to run.
.Pp
The
.Fn timeout_initialized
macro can be used to check if a timeout has been initialized.
.Pp
The
.Fn timeout_triggered
macro can be used to check if a timeout is running or has been run.
The
.Fn timeout_add
and
.Fn timeout_del
functions clear the triggered state for that timeout.
.Pp
When possible, use the
.Fn timeout_add_tv ,
.Fn timeout_add_ts ,
.Fn timeout_add_bt ,
.Fn timeout_add_sec ,
.Fn timeout_add_msec ,
.Fn timeout_add_usec ,
and
.Fn timeout_add_nsec
functions instead of
.Fn timeout_add .
Those functions add a timeout whilst converting the time specified
by the respective types.
They also defer the timeout handler for at least one tick if called
with a positive value.
.Pp
A timeout declaration can be initialised with the
.Fn TIMEOUT_INITIALIZER
macro.
The timeout will be prepared to call the function specified by the
.Fa fn
argument with the
.Fa void *
argument given in
.Fa arg .
.Sh CONTEXT
.Fn timeout_set
and
.Fn timeout_set_proc
can be called during autoconf, from process context, or from interrupt
context.
.Pp
.Fn timeout_add ,
.Fn timeout_add_sec ,
.Fn timeout_add_msec ,
.Fn timeout_add_nsec ,
.Fn timeout_add_usec ,
.Fn timeout_add_tv ,
.Fn timeout_add_ts ,
.Fn timeout_add_bt ,
.Fn timeout_del ,
.Fn timeout_pending ,
.Fn timeout_initialized ,
.Fn timeout_triggered
can be called during autoconf, from process context, or from any
interrupt context at or below
.Dv IPL_CLOCK .
.Pp
.Fn timeout_barrier
can be called from process context.
.Pp
When the timeout runs, the
.Fa fn
argument to
.Fn timeout_set
or
.Fn timeout_set_proc
will be called in an interrupt context at
.Dv IPL_SOFTCLOCK
or a process context, respectively.
.Sh RETURN VALUES
.Fn timeout_add ,
.Fn timeout_add_sec ,
.Fn timeout_add_msec ,
.Fn timeout_add_nsec ,
.Fn timeout_add_usec ,
.Fn timeout_add_tv ,
.Fn timeout_add_ts ,
and
.Fn timeout_add_bt
will return 1 if the timeout
.Fa to
was added to the timeout schedule or 0 if it was already queued.
.Pp
.Fn timeout_del
will return 1 if the timeout
.Fa to
was removed from the pending timeout schedule or 0 if it was not
currently queued.
.Sh CODE REFERENCES
These functions are implemented in the file
.Pa sys/kern/kern_timeout.c .
.Sh SEE ALSO
.Xr hz 9 ,
.Xr splclock 9 ,
.Xr tsleep 9 ,
.Xr tvtohz 9
