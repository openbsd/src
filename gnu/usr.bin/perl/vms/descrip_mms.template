!GROK!THIS!
# Descrip.MMS for perl5 on VMS
# Last revised 5-Dec-2001 by Craig Berry -- craigberry@mac.com
#
#: This file uses MMS syntax, and can be processed using DEC's MMS product,
#: or the free MMK clone (available by ftp at ftp.spc.edu).  If you want to
#: a Unix-style MAKE tool, run this file through mms2make.pl, which should
#: be found in the same directory as this file.
#:
#: Lines beginning with "#:" will be removed by mms2make.pl when converting
#: this file to MAKE syntax.
#
#	tidy      -- purge files generated by executing this file
#	clean     -- remove all intermediate (e.g. object files, C files generated
#	             during build) files generated by executing this file,
#	             but leave 'installable' files (images, library) intact
#	realclean -- remove all files generated by executing this file
#	cleansrc  -- 'realclean' + purge *.c,*.h,descrip.mms
#	crtl.opt  -- compiler-specific linker options file (made automatically)
#

#### Start of system configuration section. ####

~DECC~
~DECCXX~
~GNUC~
~ARCH-TYPE~ = 1
~THREAD~
~SOCKET~
~MALLOC~
~CC~
~MTK~
~MTU~
~FLAGS~
~LARGEFILE~
~ARCHNAME~
~USEVMSDEBUG~
~PREFIX~

#: >>>>> Architecture-specific options <<<<<
.ifdef IXE
O = .ibj
OLB = .ilb
E = .ixe
.else
.ifdef AXE
# File type to use for object files
O = .abj
# File type to use for object libraries
OLB = .alb
# File type to use for executable images
E = .axe
.else
# File type to use for object files
O = .obj
# File type to use for object libraries
OLB = .olb
# File type to use for executable images
E = .exe
.endif
.endif

.ifdef __IA64__
OBJVAL = $(O)
.else
.ifdef __AXP__
OBJVAL = $(O)
.else
OBJVAL = $(MMS$TARGET_NAME)$(O)
.endif
.endif

PERL_VERSION = ~PV~

.ifdef MALLOC
MALLOC_O = malloc$(O)
MALLOC_C = malloc$(C)
.endif

.ifdef DECC_SOCKETS
SOCKET=1
.endif

ARCHDIR =  [.lib.$(ARCHNAME).$(PERL_VERSION)]
ARCHCORE = [.lib.$(ARCHNAME).$(PERL_VERSION).CORE]
ARCHAUTO = [.lib.$(ARCHNAME).$(PERL_VERSION).auto]

#: >>>>>Compiler-specific options <<<<<
.ifdef GNUC
.first
	@ If F$TrnLnm("Sys").eqs."" Then Define/NoLog SYS GNU_CC_Include:[VMS]
CC = gcc
# -fno-builtin avoids bug in gcc up to version 2.6.2 which can destroy
# data when memcpy() is called on large (>64 kB) blocks of memory
# (fixed in gcc 2.6.3)
XTRACCFLAGS = /Obj=$(MMS$TARGET_NAME)$(O)/NoCase_Hack/Optimize=2
DBGSPECFLAGS =
XTRADEF = 
XTRAOBJS =
LIBS1 = GNU_CC:[000000]GCCLIB.OLB/Library
LIBS2 = Sys$Share:VAXCRTL/Shareable
POSIX =
.else
XTRAOBJS = 
LIBS1 = $(XTRAOBJS)
DBGSPECFLAGS = /Show=(expansion,include)/machine
# Some versions of DECCRTL on AXP have a bug in chdir() which causes the change
# to persist after the image exits, even when this was not requested, iff
# SYSNAM is enabled.  This is fixed in CSC Patch # AXPACRT04_061, but turning
# off SYSNAM for the MM[SK] subprocess doesn't hurt anything, so we do it
# just in case.
.first
	@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").nes."" Then Define/NoLog SYS DECC$System_Include
.ifdef __AXP__
	@ Set Process/Privilege=(NoSYSNAM)
	@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").eqs."" Then Define/NoLog SYS Sys$Library
.else
	@ If F$TrnLnm("Sys").eqs."" .and. F$TrnLnm("DECC$System_Include").eqs."" Then Define/NoLog SYS DECC$Library_Include
.endif

.ifdef DECCXX
XTRACCFLAGS = /Include=[]/Standard=ANSI/Prefix=All/Obj=$(OBJVAL)
.else
XTRACCFLAGS = /Include=[]/Standard=Relaxed_ANSI/Prefix=All/Obj=$(OBJVAL)
.endif
XTRADEF =
POSIX = POSIX
.endif

#: >>>>> Configuration options <<<<<
#: __DEBUG__: builds images with full VMS debugger support
.ifdef __DEBUG__
DBGCCFLAGS = /List/Debug/NoOpt$(DBGSPECFLAGS)
DBGLINKFLAGS = /Trace/Debug/Map=$(MMS$TARGET_NAME).MAP/Full/Cross
DBG = DBG
.else
DBGCCFLAGS = /NoList
DBGLINKFLAGS = /NoTrace/NoMap
DBG = 
.endif

.ifdef THREADED
THREADDEF = 
THREAD = THREAD
.endif

.ifdef OLDTHREADED
THREADDEF = 
THREAD = THREAD
THRLIBS1 = sys$share:cma$lib_shr/share|sys$share:cma$rtl/share
.ifdef __AXP__
THRLIBS2 = sys$share:cma$open_lib_shr/share|sys$share:cma$open_rtl/share
.endif
.endif

.ifdef MTU
.ifdef MTK
MTHREADLINKFLAGS = /THREADS=(MULTIPLE_KERNEL,UPCALLS)
.else
MTHREADLINKFLAGS = /THREADS=UPCALLS
.endif
.else
MTHREADLINKFLAGS = 
.endif

# C preprocessor manifest "DEBUGGING" ==> perl -D, not the VMS debugger
.IFDEF LARGEFILE
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=$(LARGEFILE)
CORECFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=(PERL_CORE,$(LARGEFILE))
.ELSE
CFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)
CORECFLAGS = $(XTRACCFLAGS)$(DBGCCFLAGS)$(FLAGS)/Define=PERL_CORE
.ENDIF

LINKFLAGS = $(DBGLINKFLAGS)

MAKE = $(MMS)
MAKEFILE = Descrip.MMS   # this file
NOOP = continue

# Macros to invoke a copy of miniperl during the build.  Targets which
# are built using these macros should depend on $(MINIPERL_EXE)
MINIPERL_EXE = Sys$Disk:[]miniperl$(E)
MINIPERL = MCR $(MINIPERL_EXE) "-I[.lib]"
MINIPERLQ = MCR $(MINIPERL_EXE) ""-I[.lib]""
XSUBPP = $(MINIPERL) "-I[.ext.re]" [.lib.extutils]xsubpp -noprototypes
# Macro to invoke a preexisting copy of Perl.  This is used to regenerate
# some header files when rebuilding Perl, but premade versions are provided
# in the distribution, so it's OK if this doesn't work; it's here to make
# life easier for those who modify Perl and rebuild it.
INSTPERL = perl
# Macros to invoke a copy of perl during the build.  Targets which
# are built using these macros should depend on $(PERL_EXE) EXT
.IFDEF __DEBUG__
PERL_EXE = Sys$Disk:[]n$(DBG)perl$(E)
.ELSE
PERL_EXE = Sys$Disk:[]perl$(E)
.ENDIF
PERL = MCR $(PERL_EXE) "-I[.lib]"

# Space-separated list of "static" extensions to build into perlshr (case counts).
MYEXT = DynaLoader
# object files for these extensions; the trailing comma is required if
# there are any object files specified
# These must be built separately, or you must add rules below to build them
myextobj = DynaLoader$(O),
EXT = $(MYEXT)
extobj = $(myextobj)

.ifdef LIBS2
.else
LIBS2=
.endif

.ifdef THRLIBS1
.else
THRLIBS1=
.endif

.ifdef THRLIBS2
.else
THRLIBS2=
.endif

FULLLIBS2 = $(LIBS2)|$(THRLIBS1)|$(THRLIBS2)

#### End of system configuration section. ####

c0 = $(MALLOC_C) av.c caretx.c deb.c doio.c doop.c dquote.c dump.c globals.c gv.c hv.c mro_core.c
c1 = mg.c locale.c mathoms.c miniperlmain.c numeric.c op.c pad.c perl.c perlapi.c perlio.c
c2 = perly.c pp.c pp_ctl.c pp_hot.c pp_pack.c pp_sort.c pp_sys.c regcomp.c regexec.c reentr.c
c3 = run.c scope.c sv.c taint.c time64.c toke.c universal.c utf8.c util.c vms.c keywords.c
c = $(c0) $(c1) $(c2) $(c3)

obj0 = perl$(O)
obj1 = $(MALLOC_O) av$(O) caretx$(O) deb$(O) doio$(O) doop$(O) dquote$(O) dump$(O) mro_core$(O) globals$(O) gv$(O) hv$(O)
obj2 = keywords$(O) locale$(O) mathoms$(O) mg$(O) miniperlmain$(O) numeric$(O) op$(O) pad$(O) perlapi$(O) perlio$(O) 
obj3 = perly$(O) pp$(O) pp_ctl$(O) pp_hot$(O) reentr$(O) pp_pack$(O) pp_sort$(O) pp_sys$(O) regcomp$(O) 
obj4 = regexec$(O) run$(O) scope$(O) sv$(O) taint$(O) time64$(O) toke$(O) universal$(O) utf8$(O) util$(O) vms$(O)

mini_obj = perlmini$(O) $(obj1) $(obj2) $(obj3) $(obj4)
obj = $(obj0) $(obj1) $(obj2) $(obj3) $(obj4)

h0 = av.h config.h cop.h cv.h embed.h embedvar.h
h1 = EXTERN.h form.h gv.h handy.h hv.h l1_char_class_tab.h INTERN.h intrpvar.h
h2 = iperlsys.h keywords.h mydtrace.h mg.h mg_vtable.h nostdio.h op.h 
h3 = op_reg_common.h opcode.h opnames.h overload.h pad.h parser.h patchlevel.h 
h4 = perl.h perlapi.h perlio.h perlsdio.h perlvars.h perly.h
h5 = pp.h pp_proto.h proto.h regcomp.h regexp.h regnodes.h scope.h
h6 = sv.h thread.h utf8.h util.h vmsish.h warnings.h xsub.h
h = $(h0) $(h1) $(h2) $(h3) $(h4) $(h5) $(h6)

acopt = $(ARCHCORE)perlshr_attr.opt $(ARCHCORE)$(DBG)perlshr_bld.opt
ac = archcore_includes.ts $(acopt)

generated_headers = uudmap.h bitcount.h mg_data.h

CRTL = []crtl.opt
CRTLOPTS =,$(CRTL)/Options

.SUFFIXES

.ifdef LINK_ONLY
.else
.SUFFIXES $(O) .c .xs

.xs.c :
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$TARGET)

.c$(O) :
	$(CC) $(CFLAGS) $(MMS$SOURCE)

.xs$(O) :
	$(XSUBPP) $(MMS$SOURCE) >$(MMS$SOURCE_NAME).c
	$(CC) $(CFLAGS) $(MMS$SOURCE_NAME).c
.endif

# Directories of Unicode data files generated by mktables
unidatadirs = lib/unicore/To lib/unicore/lib

# Modules which must be installed before we can build extensions
LIBPREREQ = $(ARCHDIR)Config.pm $(ARCHDIR)Config_heavy.pl $(ARCHDIR)vmspipe.com

utils1 = [.utils]perldoc.com [.utils]c2ph.com [.utils]h2ph.com 
utils2 = [.utils]h2xs.com [.utils]libnetcfg.com [.lib]perlbug.com [.utils]json_pp.com
utils3 = [.utils]perlivp.com [.lib]splain.com [.utils]pl2pm.com [.utils]xsubpp.com [.utils]pod2html.com [.utils]instmodsh.com
utils4 = [.utils]enc2xs.com [.utils]piconv.com [.utils]cpan.com [.utils]prove.com [.utils]ptar.com [.utils]ptardiff.com [.utils]shasum.com
utils5 = [.utils]corelist.com [.utils]ptargrep.com [.utils]zipdetails.com [.utils]encguess.com

all : base extras archcorefiles preplibrary [.pod]perltoc.pod
	@ QUALIFIERS := $(MMSQUALIFIERS)
	@ QUALIFIERS = QUALIFIERS - """" - """"
	@ write sys$output " "
	@ write sys$output " Everything is up to date. '$(MMS)''QUALIFIERS' test' to run test suite."

git_version.h : $(MINIPERL_EXE) make_patchnum.pl
        $(MINIPERL) make_patchnum.pl

base : miniperl git_version.h nonxsext perl
	@ $(NOOP)
extras : dynext libmods utils extra.pods
	@ $(NOOP)
libmods : $(LIBPREREQ)
	@ $(NOOP)
utils : $(utils1) $(utils2) $(utils3) $(utils4) $(utils5)
	@ $(NOOP)
extra.pods : miniperl
	@ @extra_pods.com

PERLDELTA_CURRENT = [.pod]perl5243delta.pod

$(PERLDELTA_CURRENT) : [.pod]perldelta.pod
	Copy/NoConfirm/Log $(MMS$SOURCE) $(PERLDELTA_CURRENT)

[.pod]perlmodlib.pod : [.pod]perlmodlib.pl MANIFEST $(MINIPERL_EXE)
	$(MINIPERL) [.pod]perlmodlib.pl "-q"

[.pod]perlapi.pod : [.pod]perlintern.pod
	@ $(NOOP)

[.pod]perlintern.pod : embed.fnc autodoc.pl $(MINIPERL_EXE)
	$(MINIPERL) autodoc.pl

[.pod]perltoc.pod : $(PERLDELTA_CURRENT) [.pod]perlapi.pod [.pod]perlintern.pod  [.pod]perlmodlib.pod extra.pods $(PERL_EXE)
	@ define/user_mode $(DBG)PERLSHR SYS$DISK:[]$(DBG)perlshr$(E)
	$(PERL) "-f" [.pod]buildtoc "-q"

archcorefiles : $(ac) $(ARCHAUTO)time.stamp
	@ $(NOOP)

# See the comment in Makefile.SH explaining this seemingly cranky ordering
$(MINIPERL_EXE) : [.lib]buildcustomize.pl
	@ $(NOOP)

vmspipe.com : [.vms]vmspipe.com
	Copy/NoConfirm/Log $(MMS$SOURCE) []

miniperl : $(DBG)miniperl$(E)  vmspipe.com
	@ Continue

[.lib]buildcustomize.pl :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL) write_buildcustomize.pl
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MINIPERL_EXE) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals $(CRTLOPTS)
       $(MINIPERL) "-f" write_buildcustomize.pl

$(DBG)miniperl$(E) :  miniperlmain$(O), $(DBG)libperlmini$(OLB) $(CRTL)
	Link $(LINKFLAGS)/Trace/Exe=$(MMS$TARGET) miniperlmain$(O), $(DBG)libperlmini$(OLB)/Library/Include=globals  $(CRTLOPTS)

$(DBG)libperl$(OLB) : $(obj)
	@ If F$Search("$(MMS$TARGET)").eqs."" Then Library/Object/Create $(MMS$TARGET)
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)

$(DBG)libperlmini$(OLB) : $(mini_obj)
	@ If F$Search("$(MMS$TARGET)").eqs."" Then Library/Object/Create $(MMS$TARGET)
	Library/Object/Replace $(MMS$TARGET) $(MMS$SOURCE_LIST)

perlmain.c : miniperlmain.c $(MINIPERL_EXE) nonxsext
	$(MINIPERL) -"MExtUtils::Miniperl" -e "writemain(\'perlmain.c', @ARGV)" "$(EXT)"

.ifdef __DEBUG__
# Link an extra perl that doesn't invoke the debugger
perl : $(DBG)perl$(E)
	Link $(LINKFLAGS)$(MTHREADLINKFLAGS)/NoDebug/Trace/NoMap/NoCross/NoFull/Exe=N$(DBG)perl$(E) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)
.else
perl : $(DBG)perl$(E)
	@ Continue
.endif

$(DBG)perl$(E) : perlmain$(O), $(DBG)perlshr$(E), $(MINIPERL_EXE)
	@ @[.vms]genopt "PerlShr.Opt/Write" "|" "''F$Environment("Default")'$(DBG)PerlShr$(E)/Share"
	Link $(LINKFLAGS)$(MTHREADLINKFLAGS)/Exe=$(MMS$TARGET) perlmain$(O), perlshr.opt/Option, perlshr_attr.opt/Option $(CRTLOPTS)

$(DBG)perlshr$(E) : $(DBG)libperl$(OLB) $(extobj) $(DBG)perlshr_xtras.ts
	Link $(LINKFLAGS)/Share=$(MMS$TARGET) $(extobj) []$(DBG)perlshr_bld.opt/Option, perlshr_attr.opt/Option

perlmini.c : perl.c
	@ IF F$SEARCH("$(MMS$TARGET)") .NES. "" THEN DELETE/NOCONFIRM/LOG $(MMS$TARGET);*
	@ COPY/NOCONFIRM _NLA0: $(MMS$TARGET)
	@ SET FILE /ATTRIBUTES=RFM:STMLF $(MMS$TARGET)
	@ OPEN/APPEND perlmini $(MMS$TARGET)
	@ WRITE perlmini "#define PERL_IS_MINIPERL"
	@ CLOSE perlmini
	@ APPEND/NOCONFIRM/LOG $(MMS$SOURCE) $(MMS$TARGET)

perlmini$(O) : perlmini.c
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)

bitcount.h mg_data.h : uudmap.h 
	@ $(NOOP)

uudmap.h : generate_uudmap$(E)
	MCR SYS$DISK:[]generate_uudmap$(E) $(generated_headers)

generate_uudmap$(E) : generate_uudmap$(O) $(CRTL)
	Link $(LINKFLAGS)/NoDebug/Trace/NoMap/NoFull/NoCross/Exe=$(MMS$TARGET) generate_uudmap$(O) $(CRTLOPTS)

generate_uudmap$(O) : generate_uudmap.c mg_raw.h
        $(CC) $(CORECFLAGS) $(MMS$SOURCE)

# The following files are built in one go by gen_shrfls.pl:
#  perlshr_attr.opt, $(DBG)perlshr_bld.opt - AXP and IA64
# The song and dance with gen_shrfls.opt accommodates DCL's line length limit.
$(DBG)perlshr_xtras.ts : perl.h config.h vmsish.h proto.h [.vms]gen_shrfls.pl $(MINIPERL_EXE) $(MAKEFILE) $(CRTL)
	@ $(MINIPERL) makedef.pl "PLATFORM=vms" > makedef.lis
	@ $(MINIPERLQ) -e "print join('|',@ARGV),'|';" "$(CC)$(CFLAGS)" >gen_shrfls.opt
	@ $(MINIPERLQ) -e "print join('|',@ARGV);" "$(O)" "$(DBG)" "$(OLB)" "$(EXT)" "$(CRTL)" >>gen_shrfls.opt
	$(MINIPERL) [.vms]gen_shrfls.pl -f gen_shrfls.opt
	@ Delete/NoLog/NoConfirm gen_shrfls.opt;
	@ If F$Search("$(DBG)perlshr_xtras.ts").nes."" Then Delete/NoLog/NoConfirm $(DBG)perlshr_xtras.ts;*
	@ Copy _NLA0: $(DBG)perlshr_xtras.ts

$(ARCHDIR)Config.pm : [.lib]Config.pm
	Create/Directory $(ARCHDIR)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)

$(ARCHDIR)Config_heavy.pl : [.lib]Config_heavy.pl
	Create/Directory $(ARCHDIR)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHDIR)

[.lib]Config.pm : config.h $(MINIPERL_EXE)
	$(MINIPERL) ConfigPM.

$(ARCHDIR)vmspipe.com : vmspipe.com
        Copy $(MMS$SOURCE) $(ARCHDIR)

unidatafiles.ts : $(MINIPERL_EXE) [.lib]Config.pm [.lib.unicore]mktables nonxsext
	$(MINIPERL) [.lib.unicore]mktables "-C" [.lib.unicore] "-P" [.pod] "-makelist" "-maketest" "-p"
	@ If F$Search("$(MMS$TARGET)").nes."" Then Delete/NoLog/NoConfirm $(MMS$TARGET);*
	@ Copy/NoConfirm _NLA0: $(MMS$TARGET)
 
DynaLoader$(O) : [.lib]buildcustomize.pl $(ARCHDIR)Config.pm $(MINIPERL_EXE)
	$(MINIPERL) make_ext.pl "MAKE=$(MMS)" "DynaLoader"

dynext : $(LIBPREREQ) $(DBG)perlshr$(E) unidatafiles.ts DynaLoader$(O) preplibrary makeppport $(MINIPERL_EXE)
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--dynamic" "--static"

nonxsext : $(LIBPREREQ) preplibrary $(MINIPERL_EXE) [.pod]perlfunc.pod
       $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--nonxs"

[.utils]perldoc.com : [.utils]perldoc.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]perlivp.com : [.utils]perlivp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]cpan.com : [.utils]cpan.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]prove.com : [.utils]prove.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptar.com : [.utils]ptar.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptardiff.com : [.utils]ptardiff.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]ptargrep.com : [.utils]ptargrep.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]shasum.com : [.utils]shasum.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]corelist.com : [.utils]corelist.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]c2ph.com : [.utils]c2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]json_pp.com : [.utils]json_pp.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]enc2xs.com : [.utils]enc2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]encguess.com : [.utils]encguess.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]h2ph.com : [.utils]h2ph.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]h2xs.com : [.utils]h2xs.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]instmodsh.com : [.utils]instmodsh.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]libnetcfg.com : [.utils]libnetcfg.PL $(ARCHDIR)Config.pm
       $(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.lib]perlbug.com : [.utils]perlbug.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]perlbug.com [.lib]

[.utils]piconv.com : [.utils]piconv.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]pl2pm.com : [.utils]pl2pm.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.lib]splain.com : [.utils]splain.PL $(ARCHDIR)Config.pm
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)
	Copy/NoConfirm/Log [.utils]splain.com [.lib]

[.utils]xsubpp.com : [.utils]xsubpp.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]zipdetails.com : [.utils]zipdetails.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

[.utils]pod2html.com : [.utils]pod2html.PL $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) -"I[-.lib]" $(MMS$SOURCE)

preplibrary : $(MINIPERL_EXE) $(LIBPREREQ) 
	@ $(NOOP)

makeppport : $(MINIPERL_EXE) $(ARCHDIR)Config.pm nonxsext
	$(MINIPERL) mkppport

install.html : [.pod]perltoc.pod
	@ @perl_setup.com "$(PREFIX)"
	@ If F$Search("perl_root:[lib]html.dir").eqs."" Then Create/Directory perl_root:[lib.html]
	$(MINIPERL) installhtml. "--podroot=. --recurse --htmldir=/perl_root/lib/html --htmlroot=.. --verbose"

printconfig :
        @ @[.vms]make_command $(MMS) $(MMSQUALIFIERS) $(MMSTARGETS)
        @ @[.vms]myconfig "$(CC)" "$(CFLAGS)" "$(LINKFLAGS)" "$(LIBS1)" "$(FULLLIBS2)" "$(EXT)" "$(DBG)"

# The following files are generated automatically
#       embed.pl:       proto.h embed.h embedvar.h perlapi.h perlapi.c
#       opcode.pl:      opcode.h opnames.h pp_proto.h
#       regcomp.pl:     regnodes.h
#       warnings.pl:    warnings.h lib/warnings.pm
# The correct versions should be already supplied with the perl kit,
# in case you don't have perl available.
# To force them to be regenerated, run
#       perl regen.pl
# with your existing copy of perl
# (make regen_headers is kept for backwards compatibility)

regen :
	$(INSTPERL) regen.pl

regen_headers :
	$(INSTPERL) regen.pl -v

.ifdef LINK_ONLY
.else
perly$(O) : perly.c, perly.h, $(h)
.endif

check : test
	@ Continue

test : all
	@ PERL_TEST_DRIVER == "TEST."
	- @[.vms]test.com "$(E)" "$(__DEBUG__)"
	@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.

test_harness : all
	@ PERL_TEST_DRIVER == "harness."
	- @[.vms]test.com "$(E)" "$(__DEBUG__)"
	@ $(MINIPERL) -e "print ""Ran tests"";" > [.t]rantests.

minitest : $(MINITEST_EXE) unidatafiles.ts
	@ PERL_TEST_DRIVER == "minitest"
	- @[.vms]test.com "$(E)" "$(__DEBUG__)"

# install ought not need a source, but it doesn't work if one's not
# there. Go figure...
install : $(PERL_EXE)
	@ @perl_setup.com "$(PREFIX)"
	If F$TrnLnm("Sys") .nes. "" Then Deass SYS
	@ define/user_mode $(DBG)PERLSHR SYS$DISK:[]$(DBG)perlshr$(E)
	$(PERL) installperl

archify : all
	@ Write Sys$Output "Moving files to architecture-specific locations for $(ARCHNAME)"
	archroot = "$(ARCHAUTO)" - "]" + "...]"
	Backup/Log/Verify [.lib.auto...]*.*;/Exclude=(*.al,*.ix) 'archroot'/New_Version
	Delete/Log/NoConfirm [.lib.auto...]*.*;*/exclude=(*.al,*.ix,*.dir)
	Delete/Log/NoConfirm [.lib]Config.pm;*
	Delete/Log/NoConfirm [.lib]Config_heavy.pl;*
	Copy/Log/NoConfirm *$(E);, $(ARCHDIR)
	Delete/Log/NoConfirm Perl*$(E);*
	@ QUALIFIERS := $(MMSQUALIFIERS)
	@ QUALIFIERS = QUALIFIERS - """" - """"
	@ Write Sys$Output "Architecture-specific setup completed."
	@ Write Sys$Output "Before building for another architecture, be sure to"
	@ Write Sys$Output "    1. $(MMS)''QUALIFIERS' clean"
	@ Write Sys$Output "    2. Delete Miniperl$(E)"

# CORE subset for MakeMaker, so we can build Perl without sources

archcore_includes.ts :
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log *.h $(ARCHCORE)
	@ Copy _NLA0: $(MMS$TARGET)
$(ARCHCORE)$(DBG)libperl$(OLB) : $(DBG)libperl$(OLB) $(DBG)perlshr_xtras.ts
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(MMS$SOURCE) $(ARCHCORE)
$(ARCHCORE)perlshr_attr.opt : $(DBG)perlshr_xtras.ts
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log perlshr_attr.opt $(ARCHCORE)
$(ARCHCORE)$(DBG)perlshr_bld.opt : $(DBG)perlshr_xtras.ts
	@ If F$Search("$(ARCHDIR)CORE.dir").eqs."" Then Create/Directory $(ARCHCORE)
	Copy/NoConfirm/Log $(DBG)perlshr_bld.opt $(ARCHCORE)
$(ARCHAUTO)time.stamp :
	@ If F$Search("$(ARCHDIR)auto.dir").eqs."" Then Create/Directory $(ARCHAUTO)
	@ If F$Search("$(MMS$TARGET)").eqs."" Then Copy/NoConfirm _NLA0: $(MMS$TARGET)

.ifdef LINK_ONLY
.else
# We need(ed?) an action line here for broken older versions of MMS which
# otherwise conclude that they should be compiling [.x2p]utils.c :-(
#util$(O) : util.c
#	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
# AUTOMATICALLY GENERATED MAKE DEPENDENCIES--PUT NOTHING BELOW THIS LINE
av$(O) : av.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
caretx$(O) : caretx.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
deb$(O) : deb.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doio$(O) : doio.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
doop$(O) : doop.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
dquote$(O) : dquote.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
dump$(O) : dump.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
globals$(O) : globals.c $(generated_headers) $(h)
        $(CC) $(CORECFLAGS) $(MMS$SOURCE)
gv$(O) : gv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mro_core$(O) : mro_core.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
hv$(O) : hv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
keywords$(O) : keywords.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
locale$(O) : locale.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
malloc$(O) : malloc.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mathoms$(O) : mathoms.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
mg$(O) : mg.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
miniperlmain$(O) : miniperlmain.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
numeric$(O) : numeric.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pad$(O) : pad.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
op$(O) : op.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perl$(O) : perl.c git_version.h $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlapi$(O) : perlapi.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlio$(O) : perlio.c config.h $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perlmain$(O) : perlmain.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
perly$(O) : perly.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp$(O) : pp.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_ctl$(O) : pp_ctl.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_hot$(O) : pp_hot.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_pack$(O) : pp_pack.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_sort$(O) : pp_sort.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
pp_sys$(O) : pp_sys.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
reentr$(O) : reentr.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
regcomp$(O) : regcomp.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
regexec$(O) : regexec.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
run$(O) : run.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
scope$(O) : scope.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
sv$(O) : sv.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
taint$(O) : taint.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
time64$(O) : time64.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
toke$(O) : toke.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
universal$(O) : universal.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
utf8$(O) : utf8.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
util$(O) : util.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)
vms$(O) : vms.c $(h)
	$(CC) $(CORECFLAGS) $(MMS$SOURCE)

# End of automatically generated make dependencies
.endif # !LINK_ONLY

vmsish.h : [.vms]vmsish.h
	Copy/Log/NoConfirm [.vms]vmsish.h []

vms.c : [.vms]vms.c
	Copy/Log/Noconfirm [.vms]vms.c []

$(CRTL) : $(MAKEFILE)
	@ @[.vms]genopt "$(CRTL)/Write" "|" "$(LIBS1)|$(FULLLIBS2)"

ok : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)"

okfile : $(utils)
	$(MINIPERL) lib/perlbug.com -ok -s "(UNINSTALLED)" "-F" perl.ok

nok : $(utils)
	@ write sys$output " "
	@ write sys$output " Please type the command:"
	@ write sys$output " "
	@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"""

nokfile : $(utils)
	@ write sys$output " "
	@ write sys$output " Please type the command:"
	@ write sys$output " "
	@ write sys$output "$(MINIPERLQ) lib/perlbug.com -nok -s ""(UNINSTALLED)"" ""-F"" perl.nok"

cleanlis :
	- If F$Search("*.Lis").nes."" Then Delete/NoConfirm/Log *.Lis;*
	- If F$Search("*.CPP").nes."" Then Delete/NoConfirm/Log *.CPP;*
	- If F$Search("*.Map").nes."" Then Delete/NoConfirm/Log *.Map;*

cleantest :
        - If F$Search("[.t]Perl$(E)").nes."" Then Delete/NoConfirm/Log [.t]Perl$(E);*
        - If F$Search("[.t]VMSPIPE.COM").nes."" Then Delete/NoConfirm/Log [.t]VMSPIPE.COM;*

tidy : cleanlis
	- If F$Search("[...]*.Opt;-1").nes."" Then Purge/NoConfirm/Log [...]*.Opt
	- If F$Search("[...]*$(O);-1").nes."" Then Purge/NoConfirm/Log [...]*$(O)
	- If F$Search("[...]*$(E);-1").nes."" Then Purge/NoConfirm/Log [...]*$(E)
	- If F$Search("config.h;-1").nes."" Then Purge/NoConfirm/Log config.h
	- If F$Search("config.sh;-1").nes."" Then Purge/NoConfirm/Log config.sh
	- If F$Search("vmsish.h;-1").nes."" Then Purge/NoConfirm/Log vmsish.h
	- If F$Search("vms.c;-1")   .nes."" Then Purge/NoConfirm/Log vms.c
	- If F$Search("perlmain.c;-1")   .nes."" Then Purge/NoConfirm/Log perlmain.c
	- If F$Search("uudmap.h;-1")   .nes."" Then Purge/NoConfirm/Log uudmap.h
	- If F$Search("bitcount.h;-1")   .nes."" Then Purge/NoConfirm/Log bitcount.h
	- If F$Search("mg_data.h;-1")   .nes."" Then Purge/NoConfirm/Log mg_data.h
	- If F$Search("Perlshr_Gbl*.Mar;-1")   .nes."" Then Purge/NoConfirm/Log Perlshr_Gbl*.Mar
	- If F$Search("[.ext.Opcode...];-1").nes."" Then Purge/NoConfirm/Log [.ext.Opcode]
	- If F$Search("[.lib.auto...]*.al;-1").nes."" Then Purge/NoConfirm/Log [.lib.auto...]*.al
	- If F$Search("[.lib.auto...]autosplit.ix;-1").nes."" Then Purge/NoConfirm/Log [.lib.auto...]autosplit.ix
	- If F$Search("[.lib]Config.pm;-1").nes."" Then Purge/NoConfirm/Log [.lib]Config.pm
	- If F$Search("$(ARCHDIR)Config.pm;-1").nes."" Then Purge/NoConfirm/Log $(ARCHDIR)Config.pm
	- If F$Search("[.lib]Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log [.lib]Config_heavy.pl
	- If F$Search("$(ARCHDIR)Config_heavy.pl;-1").nes."" Then Purge/NoConfirm/Log $(ARCHDIR)Config_heavy.pl
	- If F$Search("[.lib.VMS]*.*;-1").nes."" Then Purge/NoConfirm/Log [.lib.VMS]*.*
	- If F$Search("$(ARCHCORE)*.*").nes."" Then Purge/NoConfirm/Log $(ARCHCORE)*.*
	- If F$Search("[.lib]*.com;-1").nes."" Then Purge/NoConfirm/Log [.lib]*.com
	- If F$Search("[.pod]*.com;-1").nes."" Then Purge/NoConfirm/Log [.pod]*.com
	- If F$Search("[.utils]*.com;-1").nes."" Then Purge/NoConfirm/Log [.utils]*.com
	- If F$Search("[.lib]buildcustomize.pl;-1").nes."" Then Purge/NoConfirm/Log [.lib]buildcustomize.pl

clean : tidy cleantest
      	- $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all" "--target=clean"
	- If F$Search("*.Opt").nes."" Then Delete/NoConfirm/Log *.Opt;*/Exclude=PerlShr_*.Opt
	- If F$Search("[...]*$(O);*") .nes."" Then Delete/NoConfirm/Log [...]*$(O);*
	- If F$Search("vmsish.h").nes."" Then Delete/NoConfirm/Log vmsish.h;*
	- If F$Search("vms.c")   .nes."" Then Delete/NoConfirm/Log vms.c;*
	- If F$Search("perlmain.c")   .nes."" Then Delete/NoConfirm/Log perlmain.c;*
	- If F$Search("perlmini.c")   .nes."" Then Delete/NoConfirm/Log perlmini.c;*
	- If F$Search("uudmap.h")   .nes."" Then Delete/NoConfirm/Log uudmap.h;*
	- If F$Search("bitcount.h")   .nes."" Then Delete/NoConfirm/Log bitcount.h;*
	- If F$Search("mg_data.h")   .nes."" Then Delete/NoConfirm/Log mg_data.h;*
	- If F$Search("Perlshr_Gbl*.Mar")   .nes."" Then Delete/NoConfirm/Log Perlshr_Gbl*.Mar;*
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
	- If F$Search("[.pod]roffitall").nes."" Then Delete/NoConfirm/Log [.pod]roffitall;*
	- If F$Search("$(PERLDELTA_CURRENT)").nes."" Then Delete/NoConfirm/Log $(PERLDELTA_CURRENT);*
	- If F$Search("[.pod]perlapi.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlapi.pod;*
	- If F$Search("[.pod]perlintern.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlintern.pod;*
	- If F$Search("[.pod]perlmodlib.pod").nes."" Then Delete/NoConfirm/Log [.pod]perlmodlib.pod;*
	- If F$Search("[.pod]perltoc.pod").nes."" Then Delete/NoConfirm/Log [.pod]perltoc.pod;*
	- If F$Search("[.pod]perluniprops.pod").nes."" Then Delete/NoConfirm/Log [.pod]perluniprops.pod;*
	- @extra_pods CLEAN
	- If F$Search("[.lib]Config_git.pl").nes."" Then Delete/NoConfirm/Log [.lib]Config_git.pl;*
	- If F$Search("git_version.h").nes."" Then Delete/NoConfirm/Log git_version.h;*

realclean : clean
      	- $(MINIPERL) make_ext.pl "MAKE=$(MMS)" "--all" "--target=realclean"
	- $(MINIPERL) mkppport "--clean"
	- If F$Search("*$(OLB)").nes."" Then Delete/NoConfirm/Log *$(OLB);*
	- If F$Search("*.Opt").nes."" Then Delete/NoConfirm/Log *.Opt;*
	- If F$Search("config.h").nes."" Then Delete/NoConfirm/Log config.h;*
	- If F$Search("config.sh").nes."" Then Delete/NoConfirm/Log config.sh;*
	- $(MINIPERL) -e "use File::Path; rmtree(\@ARGV,1,0);" config
	- If F$Search("[.lib.unicore...]*.pl").nes."" Then Delete/NoConfirm/Log [.lib.unicore...]*.pl;*
	- If F$Search("[.lib.unicore]Properties.").nes."" Then Delete/NoConfirm/Log [.lib.unicore]Properties.;*
	- $(MINIPERL) -e "use File::Path; rmtree(\@ARGV,1,0);" $(unidatadirs)
	- If F$Search("Descrip.MMS").nes."" Then Delete/NoConfirm/Log Descrip.MMS;*
	- If F$Search("extra_pods.Com").nes."" Then Delete/NoConfirm/Log extra_pods.Com;*
	- If F$Search("extra.pods").nes."" Then Delete/NoConfirm/Log extra.pods;*
	- $(MINIPERL) -e "use File::Path; rmtree(['[.CXX_REPOSITORY]', 'lib/auto','lib/VMS','lib/$(ARCHNAME)'],1,0);"
	- If F$Search("*.TS").nes."" Then Delete/NoConfirm/Log *.TS;*
	- If F$Search("[.lib]Config.pm").nes."" Then Delete/NoConfirm/Log [.lib]Config.pm;*
	- If F$Search("[.lib]Config_heavy.pl").nes."" Then Delete/NoConfirm/Log [.lib]Config_heavy.pl;*
	- If F$Search("[.lib]*.com").nes."" Then Delete/NoConfirm/Log [.lib]*.com;*
	- If F$Search("[.lib...].exists").nes."" Then Delete/NoConfirm/Log [.lib...].exists;*
	- If F$Search("[.pod]*.com").nes."" Then Delete/NoConfirm/Log [.pod]*.com;*
	- If F$Search("[.utils]*.com").nes."" Then Delete/NoConfirm/Log [.utils]*.com;*
	- If F$Search("$(ARCHDIR)Config.pm").nes."" Then Delete/NoConfirm/Log $(ARCHDIR)Config.pm;*
	- If F$Search("$(ARCHDIR)Config_heavy.pl").nes."" Then Delete/NoConfirm/Log $(ARCHDIR)Config_heavy.pl;*
	- If F$Search("[.utils]perldoc.com").nes."" Then Delete/NoConfirm/Log [.utils]perldoc.com;*
	- If F$Search("[.utils]perlivp.com").nes."" Then Delete/NoConfirm/Log [.utils]perlivp.com;*
	- If F$Search("[...]*$(E)").nes."" Then Delete/NoConfirm/Log [...]*$(E);*
	- If F$Search("Perl_Setup.Com").nes."" Then Delete/NoConfirm/Log Perl_Setup.Com;*
	- If F$Search("[.t]rantests.").nes."" Then Delete/NoConfirm/Log [.t]rantests.;*
	- If F$Search("[.t]test_state.").nes."" Then Delete/NoConfirm/Log [.t]test_state.;*
	- If F$Search("vmspipe.com").nes."" Then Delete/NoConfirm/Log vmspipe.com;*
	- If F$Search("[.lib]buildcustomize.pl").nes."" Then Delete/NoConfirm/Log [.lib]buildcustomize.pl;*
	- If F$Search("[.lib]config.pod").nes."" Then Delete/NoConfirm/Log [.lib]config.pod;*

cleansrc : clean
	- If F$Search("*.c;-1").nes."" Then Purge/NoConfirm/Log *.c
	- If F$Search("*.h;-1").nes."" Then Purge/NoConfirm/Log *.h
	- If F$Search("*.vms;-1").nes."" Then Purge/NoConfirm/Log *.vms
	- If F$Search("[.vms]$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log [.vms]$(MAKEFILE)
	- If F$Search("[.vms]*.c;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.c
	- If F$Search("[.vms]*.h;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.h
	- If F$Search("[.vms]*.pl;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.pl
	- If F$Search("[.vms]*.vms;-1").nes."" Then Purge/NoConfirm/Log [.vms]*.vms
	- If F$Search("[.vms...]*.pm;-1").nes."" Then Purge/NoConfirm/Log [.vms...]*.pm
	- If F$Search("[.vms...]*.xs;-1").nes."" Then Purge/NoConfirm/Log [.vms...]*.xs
!GROK!THIS!
