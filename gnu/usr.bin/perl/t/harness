#!./perl

# We suppose that perl _mostly_ works at this moment, so may use
# sophisticated testing.

BEGIN {
    chdir 't' if -d 't';
    @INC = '../lib';              # pick up only this build's lib
}

my $torture; # torture testing?

use TAP::Harness 3.13;
use strict;
use Config;

$::do_nothing = $::do_nothing = 1;
require './TEST';
our $Valgrind_Log;

my $Verbose = 0;
$Verbose++ while @ARGV && $ARGV[0] eq '-v' && shift;

# For valgrind summary output
my $htoolnm;
my $hgrind_ct;

if ($ARGV[0] && $ARGV[0] eq '-torture') {
    shift;
    $torture = 1;
}

# Let tests know they're running in the perl core.  Useful for modules
# which live dual lives on CPAN.
$ENV{PERL_CORE} = 1;

my (@tests, $re);

# [.VMS]TEST.COM calls harness with empty arguments, so clean-up @ARGV
@ARGV = grep $_ && length( $_ ) => @ARGV;

sub _extract_tests;
sub _extract_tests {
    # This can probably be done more tersely with a map, but I doubt that it
    # would be as clear
    my @results;
    foreach (@_) {
	my $ref = ref $_;
	if ($ref) {
	    if ($ref eq 'ARRAY') {
		push @results, _extract_tests @$_;
	    } elsif ($ref eq 'HASH') {
		push @results, _extract_tests values %$_;
	    } else {
		die "Unknown reference type $ref";
	    }
	} else {
	    push @results, glob $_;
	}
    }
    @results;
}

if ($ARGV[0] && $ARGV[0]=~/^-re/) {
    if ($ARGV[0]!~/=/) {
        shift;
        $re=join "|",@ARGV;
        @ARGV=();
    } else {
        (undef,$re)=split/=/,shift;
    }
}

my $jobs = $ENV{TEST_JOBS};
my ($rules, $state, $color);
if ($ENV{HARNESS_OPTIONS}) {
    for my $opt ( split /:/, $ENV{HARNESS_OPTIONS} ) {
        if ( $opt =~ /^j(\d*)$/ ) {
            $jobs ||= $1 || 9;
        }
        elsif ( $opt eq 'c' ) {
            $color = 1;
        }
        else {
            die "Unknown HARNESS_OPTIONS item: $opt\n";
        }
    }
}

if (@ARGV) {
    # If you want these run in speed order, just use prove
    if ($^O eq 'MSWin32') {
	@tests = map(glob($_),@ARGV);
    }
    else {
	@tests = @ARGV;
    }
    # This is a hack to force config_heavy.pl to be loaded, before the
    # prep work for running a test changes directory.
    1 if $Config{d_fork};
} else {
    # Ideally we'd get somewhere close to Tux's Oslo rules
    # my $rules = {
    #     par => [
    #         { seq => '../ext/DB_File/t/*' },
    #         { seq => '../ext/IO_Compress_Zlib/t/*' },
    #         { seq => '../lib/ExtUtils/t/*' },
    #         '*'
    #     ]
    # };

    # but for now, run all directories in sequence.

    unless (@tests) {
	my @seq = <base/*.t>;

	my @next = qw(comp run cmd io re opbasic op uni mro lib porting perf);
	push @next, 'japh' if $torture;
	push @next, 'win32' if $^O eq 'MSWin32';
	push @next, 'benchmark' if $ENV{PERL_BENCHMARK};
	push @next, 'bigmem' if $ENV{PERL_TEST_MEMORY};
	# Hopefully TAP::Parser::Scheduler will support this syntax soon.
	# my $next = { par => '{' . join (',', @next) . '}/*.t' };
	my $next = { par => [
			     map { "$_/*.t" } @next
			    ] };
	@tests = _extract_tests ($next);

	# This is a bit of a game, because we only want to sort these tests in
	# speed order. base/*.t wants to run first, and ext,lib etc last and in
	# MANIFEST order
	if ($jobs) {
	    require App::Prove::State;
	    $state = App::Prove::State->new({ store => 'test_state' });
	    $state->apply_switch('slow', 'save');
	    # For some reason get_tests returns *all* the tests previously run,
	    # (in the right order), not simply the selection in @tests
	    # (in the right order). Not sure if this is a bug or a feature.
	    # Whatever, *we* are only interested in the ones that are in @tests
	    my %seen;
	    @seen{@tests} = ();
	    @tests = grep {exists $seen{$_} } $state->get_tests(0, @tests);
	}
	@tests = (@seq, @tests);
	push @seq, $next;

	my @last;
	push @last,  sort { lc $a cmp lc $b }
	    _tests_from_manifest($Config{extensions}, $Config{known_extensions});
	my %times;
	if ($state) {
	    # Where known, collate the elapsed times by test name
	    foreach ($state->results->tests()) {
		$times{$_->name} = $_->elapsed();
	    }
	}

	my %dir;
	my %total_time;

	for (@last) {
	    if ($^O eq 'MSWin32') {
		s,\\,/,g; # canonicalize path
	    };
	    # Treat every file matching lib/*.t as a "directory"
	    m!\A(\.\./lib/[^/]+\.t\z|.*[/])! or die "'$_'";
	    push @{$dir{$1}}, $_;
	    $total_time{$1} += $times{$_} || 0;
	}

	push @tests, @last;

	# Generate T::H schedule rules that run the contents of each directory
	# sequentially.
	push @seq, { par => [ map { s!/$!/*!; { seq => $_ } } sort {
	    # Directories, ordered by total time descending then name ascending
	    $total_time{$b} <=> $total_time{$a} || $a cmp $b
	} keys %dir ] };

	$rules = { seq => \@seq };
    }
}
if ($^O eq 'MSWin32') {
    s,\\,/,g for @tests;
}
@tests=grep /$re/, @tests 
    if $re;

# Allow eg ./perl t/harness t/op/lc.t
for (@tests) {
    if (-f "../$_") {
        $_ = "../$_";
        s{^\.\./t/}{};
    }
}

my %options;

my $type = 'perl';

# Load TAP::Parser now as otherwise it could be required in the short time span
# in which the harness process chdirs into ext/Dist
require TAP::Parser;

my $h = TAP::Harness->new({
    rules       => $rules,
    color       => $color,
    jobs        => $jobs,
    verbosity   => $Verbose,
    timer       => $ENV{HARNESS_TIMER},
    exec        => sub {
	my ($harness, $test) = @_;

	my $options = $options{$test};
	if (!defined $options) {
	    $options = $options{$test} = _scan_test($test, $type);
	}

	(local $Valgrind_Log = "$test.valgrind-current") =~ s/^.*\///;

	return [ split ' ', _cmd($options, $type) ];
    },
});

# Print valgrind output after test completes
if ($ENV{PERL_VALGRIND}) {
    $h->callback(
		 after_test => sub {
		     my ($job) = @_;
		     my $test = $job->[0];
		     my $vfile = "$test.valgrind-current";
	             $vfile =~ s/^.*\///;

		     if ( (! -z $vfile) && open(my $voutput, '<', $vfile)) {
			print "$test: Valgrind output:\n";
			print "$test: $_" for <$voutput>;
			close($voutput);
		     }

		     (local $Valgrind_Log = "$test.valgrind-current") =~ s/^.*\///;

		     _check_valgrind(\$htoolnm, \$hgrind_ct, \$test);
		 }
		 );
}

if ($state) {
    $h->callback(
		 after_test => sub {
		     $state->observe_test(@_);
		 }
		 );
    $h->callback(
		 after_runtests => sub {
		     $state->commit(@_);
		 }
		 );
}

$h->callback(
	     parser_args => sub {
		 my ($args, $job) = @_;
		 my $test = $job->[0];
		 _before_fork($options{$test});
		 push @{ $args->{switches} }, "-I../../lib";
	     }
	     );

$h->callback(
	     made_parser => sub {
		 my ($parser, $job) = @_;
		 my $test = $job->[0];
		 my $options = delete $options{$test};
		 _after_fork($options);
	     }
	     );

my $agg = $h->runtests(@tests);
_cleanup_valgrind(\$htoolnm, \$hgrind_ct);
exit $agg->has_errors ? 1 : 0;
