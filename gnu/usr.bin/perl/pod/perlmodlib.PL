#!../miniperl

use strict;
use warnings;

$ENV{LC_ALL} = 'C';

my $Quiet;
@ARGV = grep { not($_ eq '-q' and $Quiet = 1) } @ARGV;

if (@ARGV) {
    my $workdir = shift;
    chdir $workdir
        or die "Couldn't chdir to '$workdir': $!";
}
require 'regen/regen_lib.pl';

# MANIFEST itself is Unix style filenames, so we have to assume that Unix style
# filenames will work.

open MANIFEST, '<', 'MANIFEST'
    or die "Can't open MANIFEST: $!";
my @files =
    grep !m#/perl.*\.pod#,
    grep m#(?:\.pm|\.pod|_pm\.PL)#,
    map {s/\s.*//s; $_}
    grep { m#^(lib|ext|dist|cpan)/# && !m#/(?:t|demo)/# }
    <MANIFEST>;
close MANIFEST
    or die "$0: failed to close MANIFEST: $!";

my $out = open_new('pod/perlmodlib.pod', undef,
                   {by => "$0 extracting documentation",
                    from => 'the Perl source files'}, 1);

my %exceptions = (
    'abbrev' => 'Text::Abbrev',
    'carp' => 'Carp',
    'getopt' => 'Getopt::Std',
    'Encode::MIME::NAME' => 'Encode::MIME::Name',
    'libnetFAQ' => 'Net::libnetFAQ',
);

my (@pragma, @mod);

for my $filename (@files) {
    unless (open MOD, '<', $filename) {
        warn "Couldn't open $filename: $!";
	next;
    }

    my ($name, $thing);
    my $foundit = 0;
    {
	local $/ = "";
	while (<MOD>) {
	    next unless /^=head1 NAME/;
	    $foundit++;
	    last;
	}
    }
    unless ($foundit) {
	warn "$filename missing =head1 NAME (OK if respective .pod exists)\n"
	    unless $Quiet;
	next;
    }
    my $title = <MOD>;
    chomp $title;
    close MOD
        or die "Error closing $filename: $!";

    ($name, $thing) = split / --? /, $title, 2;

    unless ($name and $thing) {
	warn "$filename missing name\n"  unless $name;
	warn "$filename missing thing\n" unless $thing or $Quiet;
	next;
    }

    $name =~ s/[^A-Za-z0-9_:\$<>].*//;
    $name = $exceptions{$name} || $name;
    $thing =~ s/^perl pragma to //i;
    $thing = ucfirst $thing;
    $title = "=item $name\n\n$thing\n\n";

    if ($name =~ /[A-Z]/) {
	push @mod, $title;
    } else {
	push @pragma, $title;
    }
}

# Much easier to special case it like this than special case the depending on
# and parsing lib/Config.pod, or special case opening configpm and finding its
# =head1 (which is not found with the $/="" above)
push @mod, "=item Config\n\nAccess Perl configuration information\n\n";


# The intent of using =cut as the heredoc terminator is to make the whole file
# parse as (reasonably) sane Pod as-is to anything that attempts to
# brute-force treat it as such. The content is already useful - this just
# makes it tidier, by stopping anything doing this mistaking the rest of the
# Perl code for Pod. eg http://search.cpan.org/dist/perl/pod/perlmodlib.PL

print $out <<'=cut';
=head1 NAME

perlmodlib - constructing new Perl modules and finding existing ones

=head1 THE PERL MODULE LIBRARY

Many modules are included in the Perl distribution.  These are described
below, and all end in F<.pm>.  You may discover compiled library
files (usually ending in F<.so>) or small pieces of modules to be
autoloaded (ending in F<.al>); these were automatically generated
by the installation process.  You may also discover files in the
library directory that end in either F<.pl> or F<.ph>.  These are
old libraries supplied so that old programs that use them still
run.  The F<.pl> files will all eventually be converted into standard
modules, and the F<.ph> files made by B<h2ph> will probably end up
as extension modules made by B<h2xs>.  (Some F<.ph> values may
already be available through the POSIX, Errno, or Fcntl modules.)
The B<pl2pm> file in the distribution may help in your conversion,
but it's just a mechanical process and therefore far from bulletproof.

=head2 Pragmatic Modules

They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually
work well only when used within a C<use>, or C<no>.  Most of these
are lexically scoped, so an inner BLOCK may countermand them
by saying:

    no integer;
    no strict 'refs';
    no warnings;

which lasts until the end of that BLOCK.

Some pragmas are lexically scoped--typically those that affect the
C<$^H> hints variable.  Others affect the current package instead,
like C<use vars> and C<use subs>, which allow you to predeclare a
variables or subroutines within a particular I<file> rather than
just a block.  Such declarations are effective for the entire file
for which they were declared.  You cannot rescind them with C<no
vars> or C<no subs>.

The following pragmas are defined (and have their own documentation).

=over 12

=cut

print $out $_ for sort @pragma;

print $out <<'=cut';

=back

=head2 Standard Modules

Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the
Exporter module.  See their own documentation for details.

It's possible that not all modules listed below are installed on your
system. For example, the GDBM_File module will not be installed if you
don't have the gdbm library.

=over 12

=cut

print $out $_ for sort @mod;

print $out <<'=cut', "=cut\n";

=back

To find out I<all> modules installed on your system, including
those without documentation or outside the standard release,
just use the following command (under the default win32 shell,
double quotes should be used instead of single quotes).

    % perl -MFile::Find=find -MFile::Spec::Functions -Tlwe \
      'find { wanted => sub { print canonpath $_ if /\.pm\z/ },
      no_chdir => 1 }, @INC'

(The -T is here to prevent '.' from being listed in @INC.)
They should all have their own documentation installed and accessible
via your system man(1) command.  If you do not have a B<find>
program, you can use the Perl B<find2perl> program instead, which
generates Perl code as output you can run through perl.  If you
have a B<man> program but it doesn't find your modules, you'll have
to fix your manpath.  See L<perl> for details.  If you have no
system B<man> command, you might try the B<perldoc> program.

Note also that the command C<perldoc perllocal> gives you a (possibly
incomplete) list of the modules that have been further installed on
your system. (The perllocal.pod file is updated by the standard MakeMaker
install process.)

=head2 Extension Modules

Extension modules are written in C (or a mix of Perl and C).  They
are usually dynamically loaded into Perl if and when you need them,
but may also be linked in statically.  Supported extension modules
include Socket, Fcntl, and POSIX.

Many popular C extension modules do not come bundled (at least, not
completely) due to their sizes, volatility, or simply lack of time
for adequate testing and configuration across the multitude of
platforms on which Perl was beta-tested.  You are encouraged to
look for them on CPAN (described below), or using web search engines
like Alta Vista or Google.

=head1 CPAN

CPAN stands for Comprehensive Perl Archive Network; it's a globally
replicated trove of Perl materials, including documentation, style
guides, tricks and traps, alternate ports to non-Unix systems and
occasional binary distributions for these.   Search engines for
CPAN can be found at http://www.cpan.org/

Most importantly, CPAN includes around a thousand unbundled modules,
some of which require a C compiler to build.  Major categories of
modules are:

=over

=item *

Language Extensions and Documentation Tools

=item *

Development Support

=item *

Operating System Interfaces

=item *

Networking, Device Control (modems) and InterProcess Communication

=item *

Data Types and Data Type Utilities

=item *

Database Interfaces

=item *

User Interfaces

=item *

Interfaces to / Emulations of Other Programming Languages

=item *

File Names, File Systems and File Locking (see also File Handles)

=item *

String Processing, Language Text Processing, Parsing, and Searching

=item *

Option, Argument, Parameter, and Configuration File Processing

=item *

Internationalization and Locale

=item *

Authentication, Security, and Encryption

=item *

World Wide Web, HTML, HTTP, CGI, MIME

=item *

Server and Daemon Utilities

=item *

Archiving and Compression

=item *

Images, Pixmap and Bitmap Manipulation, Drawing, and Graphing

=item *

Mail and Usenet News

=item *

Control Flow Utilities (callbacks and exceptions etc)

=item *

File Handle and Input/Output Stream Utilities

=item *

Miscellaneous Modules

=back

The list of the registered CPAN sites follows.
Please note that the sorting order is alphabetical on fields:

Continent
   |
   |-->Country
         |
         |-->[state/province]
                   |
                   |-->ftp
                   |
                   |-->[http]

and thus the North American servers happen to be listed between the
European and the South American sites.

Registered CPAN sites

=for maintainers
Generated by Porting/make_modlib_cpan.pl

=head2 Africa

=over 4

=item South Africa

  http://cpan.mirror.ac.za/
  ftp://cpan.mirror.ac.za/
  http://mirror.is.co.za/pub/cpan/
  ftp://ftp.is.co.za/pub/cpan/
  ftp://ftp.saix.net/pub/CPAN/

=back

=head2 Asia

=over 4

=item China

  http://cpan.wenzk.com/

=item Hong Kong

  http://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
  ftp://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
  http://mirrors.geoexpat.com/cpan/

=item India

  http://perlmirror.indialinks.com/

=item Indonesia

  http://cpan.biz.net.id/
  http://komo.vlsm.org/CPAN/
  ftp://komo.vlsm.org/CPAN/
  http://cpan.cermin.lipi.go.id/
  ftp://cermin.lipi.go.id/pub/CPAN/
  http://cpan.pesat.net.id/

=item Japan

  ftp://ftp.u-aizu.ac.jp/pub/CPAN
  ftp://ftp.kddilabs.jp/CPAN/
  http://ftp.nara.wide.ad.jp/pub/CPAN/
  ftp://ftp.nara.wide.ad.jp/pub/CPAN/
  http://ftp.jaist.ac.jp/pub/CPAN/
  ftp://ftp.jaist.ac.jp/pub/CPAN/
  ftp://ftp.dti.ad.jp/pub/lang/CPAN/
  ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
  http://ftp.riken.jp/lang/CPAN/
  ftp://ftp.riken.jp/lang/CPAN/
  http://ftp.yz.yamagata-u.ac.jp/pub/lang/cpan/
  ftp://ftp.yz.yamagata-u.ac.jp/pub/lang/cpan/

=item Republic of Korea

  http://ftp.kaist.ac.kr/pub/CPAN
  ftp://ftp.kaist.ac.kr/pub/CPAN
  http://cpan.mirror.cdnetworks.com/
  ftp://cpan.mirror.cdnetworks.com/CPAN/
  http://cpan.sarang.net/
  ftp://cpan.sarang.net/CPAN/

=item Russia

  http://cpan.tomsk.ru/
  ftp://cpan.tomsk.ru/

=item Singapore

  http://mirror.averse.net/pub/CPAN
  ftp://mirror.averse.net/pub/CPAN
  http://cpan.mirror.choon.net/
  http://cpan.oss.eznetsols.org
  ftp://ftp.oss.eznetsols.org/cpan

=item Taiwan

  http://ftp.cse.yzu.edu.tw/pub/CPAN/
  ftp://ftp.cse.yzu.edu.tw/pub/CPAN/
  http://cpan.nctu.edu.tw/
  ftp://cpan.nctu.edu.tw/
  ftp://ftp.ncu.edu.tw/CPAN/
  http://cpan.cdpa.nsysu.edu.tw/
  ftp://cpan.cdpa.nsysu.edu.tw/Unix/Lang/CPAN/
  http://cpan.stu.edu.tw
  ftp://ftp.stu.edu.tw/CPAN
  http://ftp.stu.edu.tw/CPAN
  ftp://ftp.stu.edu.tw/pub/CPAN
  http://cpan.cs.pu.edu.tw/
  ftp://cpan.cs.pu.edu.tw/pub/CPAN

=item Thailand

  http://mirrors.issp.co.th/cpan/
  ftp://mirrors.issp.co.th/cpan/
  http://mirror.yourconnect.com/CPAN/
  ftp://mirror.yourconnect.com/CPAN/

=item Turkey

  http://cpan.gazi.edu.tr/

=back

=head2 Central America

=over 4

=item Costa Rica

  http://mirrors.ucr.ac.cr/CPAN/
  ftp://mirrors.ucr.ac.cr/CPAN/

=back

=head2 Europe

=over 4

=item Austria

  http://cpan.inode.at/
  ftp://cpan.inode.at
  http://gd.tuwien.ac.at/languages/perl/CPAN/
  ftp://gd.tuwien.ac.at/pub/CPAN/

=item Belgium

  http://ftp.belnet.be/mirror/ftp.cpan.org/
  ftp://ftp.belnet.be/mirror/ftp.cpan.org/
  http://ftp.easynet.be/pub/CPAN/
  http://cpan.weepee.org/

=item Bosnia and Herzegovina

  http://cpan.blic.net/

=item Bulgaria

  http://cpan.cbox.biz/
  ftp://cpan.cbox.biz/cpan/
  http://cpan.digsys.bg/
  ftp://ftp.digsys.bg/pub/CPAN

=item Croatia

  http://ftp.carnet.hr/pub/CPAN/
  ftp://ftp.carnet.hr/pub/CPAN/

=item Czech Republic

  ftp://ftp.fi.muni.cz/pub/CPAN/
  http://archive.cpan.cz/

=item Denmark

  http://mirrors.dotsrc.org/cpan
  ftp://mirrors.dotsrc.org/cpan/
  http://www.cpan.dk/
  http://mirror.uni-c.dk/pub/CPAN/

=item Finland

  ftp://ftp.funet.fi/pub/languages/perl/CPAN/
  http://mirror.eunet.fi/CPAN

=item France

  http://cpan.enstimac.fr/
  ftp://ftp.inria.fr/pub/CPAN/
  http://distrib-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
  ftp://distrib-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
  ftp://ftp.lip6.fr/pub/perl/CPAN/
  http://mir2.ovh.net/ftp.cpan.org
  ftp://mir1.ovh.net/ftp.cpan.org
  ftp://ftp.oleane.net/pub/CPAN/
  http://ftp.crihan.fr/mirrors/ftp.cpan.org/
  ftp://ftp.crihan.fr/mirrors/ftp.cpan.org/
  http://ftp.u-strasbg.fr/CPAN
  ftp://ftp.u-strasbg.fr/CPAN
  http://cpan.cict.fr/
  ftp://cpan.cict.fr/pub/CPAN/

=item Germany

  ftp://ftp.fu-berlin.de/unix/languages/perl/
  http://mirrors.softliste.de/cpan/
  ftp://ftp.rub.de/pub/CPAN/
  http://www.planet-elektronik.de/CPAN/
  http://ftp.hosteurope.de/pub/CPAN/
  ftp://ftp.hosteurope.de/pub/CPAN/
  http://www.mirrorspace.org/cpan/
  http://mirror.netcologne.de/cpan/
  ftp://mirror.netcologne.de/cpan/
  ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/CPAN/
  http://ftp-stud.hs-esslingen.de/pub/Mirrors/CPAN/
  ftp://ftp-stud.hs-esslingen.de/pub/Mirrors/CPAN/
  http://mirrors.zerg.biz/cpan/
  http://ftp.gwdg.de/pub/languages/perl/CPAN/
  ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
  http://dl.ambiweb.de/mirrors/ftp.cpan.org/
  http://cpan.mirror.clusters.kg/
  http://cpan.mirror.iphh.net/
  ftp://cpan.mirror.iphh.net/pub/CPAN/
  http://cpan.mirroring.de/
  http://mirror.informatik.uni-mannheim.de/pub/mirrors/CPAN/
  ftp://mirror.informatik.uni-mannheim.de/pub/mirrors/CPAN/
  http://www.chemmedia.de/mirrors/CPAN/
  http://ftp.cw.net/pub/CPAN/
  ftp://ftp.cw.net/pub/CPAN/
  http://cpan.cpantesters.org/
  ftp://cpan.cpantesters.org/CPAN/
  http://cpan.mirrored.de/
  ftp://mirror.petamem.com/CPAN/
  http://cpan.noris.de/
  ftp://cpan.noris.de/pub/CPAN/
  ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/
  ftp://ftp.gmd.de/mirrors/CPAN/

=item Greece

  ftp://ftp.forthnet.gr/pub/languages/perl/CPAN
  ftp://ftp.ntua.gr/pub/lang/perl/
  http://cpan.cc.uoc.gr/
  ftp://ftp.cc.uoc.gr/mirrors/CPAN/

=item Hungary

  http://cpan.mirrors.enexis.hu/
  ftp://cpan.mirrors.enexis.hu/mirrors/cpan/
  http://cpan.hu/

=item Iceland

  http://ftp.rhnet.is/pub/CPAN/
  ftp://ftp.rhnet.is/pub/CPAN/

=item Ireland

  http://ftp.esat.net/pub/languages/perl/CPAN/
  ftp://ftp.esat.net/pub/languages/perl/CPAN/
  http://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
  ftp://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN

=item Italy

  http://bo.mirror.garr.it/mirrors/CPAN/
  http://cpan.panu.it/
  ftp://ftp.panu.it/pub/mirrors/perl/CPAN/

=item Latvia

  http://kvin.lv/pub/CPAN/

=item Lithuania

  http://ftp.litnet.lt/pub/CPAN/
  ftp://ftp.litnet.lt/pub/CPAN/

=item Malta

  http://cpan.waldonet.net.mt/

=item Netherlands

  ftp://ftp.quicknet.nl/pub/CPAN/
  http://mirror.hostfuss.com/CPAN/
  ftp://mirror.hostfuss.com/CPAN/
  http://mirrors3.kernel.org/cpan/
  ftp://mirrors3.kernel.org/pub/CPAN/
  http://cpan.mirror.versatel.nl/
  ftp://ftp.mirror.versatel.nl/cpan/
  ftp://download.xs4all.nl/pub/mirror/CPAN/
  http://mirror.leaseweb.com/CPAN/
  ftp://mirror.leaseweb.com/CPAN/
  ftp://ftp.cpan.nl/pub/CPAN/
  http://archive.cs.uu.nl/mirror/CPAN/
  ftp://ftp.cs.uu.nl/mirror/CPAN/
  http://luxitude.net/cpan/

=item Norway

  ftp://ftp.uninett.no/pub/languages/perl/CPAN
  ftp://ftp.uit.no/pub/languages/perl/cpan/

=item Poland

  http://piotrkosoft.net/pub/mirrors/CPAN/
  ftp://ftp.piotrkosoft.net/pub/mirrors/CPAN/
  http://ftp.man.poznan.pl/pub/CPAN
  ftp://ftp.man.poznan.pl/pub/CPAN
  ftp://ftp.ps.pl/pub/CPAN/
  ftp://sunsite.icm.edu.pl/pub/CPAN/
  ftp://ftp.tpnet.pl/d4/CPAN/

=item Portugal

  http://cpan.dei.uc.pt/
  ftp://ftp.dei.uc.pt/pub/CPAN
  ftp://ftp.ist.utl.pt/pub/CPAN/
  http://cpan.perl.pt/
  http://cpan.ip.pt/
  ftp://cpan.ip.pt/pub/cpan/
  http://mirrors.nfsi.pt/CPAN/
  ftp://mirrors.nfsi.pt/pub/CPAN/
  http://cpan.dcc.fc.up.pt/

=item Romania

  http://ftp.astral.ro/pub/CPAN/
  ftp://ftp.astral.ro/pub/CPAN/
  ftp://ftp.lug.ro/CPAN
  http://mirrors.xservers.ro/CPAN/
  http://mirrors.hostingromania.ro/ftp.cpan.org/
  ftp://ftp.hostingromania.ro/mirrors/ftp.cpan.org/
  ftp://ftp.iasi.roedu.net/pub/mirrors/ftp.cpan.org/

=item Russia

  ftp://ftp.aha.ru/CPAN/
  http://cpan.rinet.ru/
  ftp://cpan.rinet.ru/pub/mirror/CPAN/
  ftp://ftp.SpringDaemons.com/pub/CPAN/
  http://mirror.rol.ru/CPAN/
  http://ftp.silvernet.ru/CPAN/
  http://ftp.spbu.ru/CPAN/
  ftp://ftp.spbu.ru/CPAN/

=item Slovakia

  http://cpan.fyxm.net/

=item Slovenia

  http://www.klevze.si/cpan

=item Spain

  http://osl.ugr.es/CPAN/
  ftp://ftp.rediris.es/mirror/CPAN/
  http://ftp.gui.uva.es/sites/cpan.org/
  ftp://ftp.gui.uva.es/sites/cpan.org/

=item Sweden

  http://mirrors4.kernel.org/cpan/
  ftp://mirrors4.kernel.org/pub/CPAN/

=item Switzerland

  http://cpan.mirror.solnet.ch/
  ftp://ftp.solnet.ch/mirror/CPAN/
  ftp://ftp.adwired.ch/CPAN/
  http://mirror.switch.ch/ftp/mirror/CPAN/
  ftp://mirror.switch.ch/mirror/CPAN/

=item Ukraine

  http://cpan.makeperl.org/
  ftp://cpan.makeperl.org/pub/CPAN
  http://cpan.org.ua/
  http://cpan.gafol.net/
  ftp://ftp.gafol.net/pub/cpan/

=item United Kingdom

  http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
  ftp://ftp.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
  http://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
  ftp://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
  http://www.mirror.8086.net/sites/CPAN/
  ftp://ftp.mirror.8086.net/sites/CPAN/
  http://cpan.mirror.anlx.net/
  ftp://ftp.mirror.anlx.net/CPAN/
  http://mirror.bytemark.co.uk/CPAN/
  ftp://mirror.bytemark.co.uk/CPAN/
  http://cpan.etla.org/
  ftp://cpan.etla.org/pub/CPAN
  ftp://ftp.demon.co.uk/pub/CPAN/
  http://mirror.sov.uk.goscomb.net/CPAN/
  ftp://mirror.sov.uk.goscomb.net/pub/CPAN/
  http://ftp.plig.net/pub/CPAN/
  ftp://ftp.plig.net/pub/CPAN/
  http://ftp.ticklers.org/pub/CPAN/
  ftp://ftp.ticklers.org/pub/CPAN/
  http://cpan.mirrors.uk2.net/
  ftp://mirrors.uk2.net/pub/CPAN/
  http://mirror.ox.ac.uk/sites/www.cpan.org/
  ftp://mirror.ox.ac.uk/sites/www.cpan.org/

=back

=head2 North America

=over 4

=item Bahamas

  http://www.securehost.com/mirror/CPAN/

=item Canada

  http://cpan.arcticnetwork.ca
  ftp://mirror.arcticnetwork.ca/pub/CPAN
  http://cpan.sunsite.ualberta.ca/
  ftp://cpan.sunsite.ualberta.ca/pub/CPAN/
  http://theoryx5.uwinnipeg.ca/pub/CPAN/
  ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
  http://arwen.cs.dal.ca/mirror/CPAN/
  ftp://arwen.cs.dal.ca/pub/mirror/CPAN/
  http://CPAN.mirror.rafal.ca/
  ftp://CPAN.mirror.rafal.ca/pub/CPAN/
  ftp://ftp.nrc.ca/pub/CPAN/
  http://mirror.csclub.uwaterloo.ca/pub/CPAN/
  ftp://mirror.csclub.uwaterloo.ca/pub/CPAN/

=item Mexico

  http://www.msg.com.mx/CPAN/
  ftp://ftp.msg.com.mx/pub/CPAN/

=item United States

=over 8

=item Alabama

  http://mirror.hiwaay.net/CPAN/
  ftp://mirror.hiwaay.net/CPAN/

=item Arizona

  http://cpan.ezarticleinformation.com/

=item California

  http://cpan.knowledgematters.net/
  http://cpan.binkerton.com/
  http://cpan.develooper.com/
  http://mirrors.gossamer-threads.com/CPAN
  http://cpan.schatt.com/
  http://mirrors.kernel.org/cpan/
  ftp://mirrors.kernel.org/pub/CPAN
  http://mirrors2.kernel.org/cpan/
  ftp://mirrors2.kernel.org/pub/CPAN/
  http://cpan.mirror.facebook.net/
  http://mirrors1.kernel.org/cpan/
  ftp://mirrors1.kernel.org/pub/CPAN/
  http://cpan-sj.viaverio.com/
  ftp://cpan-sj.viaverio.com/pub/CPAN/
  http://www.perl.com/CPAN/

=item Florida

  ftp://ftp.cise.ufl.edu/pub/mirrors/CPAN/
  http://mirror.atlantic.net/pub/CPAN/
  ftp://mirror.atlantic.net/pub/CPAN/

=item Idaho

  http://mirror.its.uidaho.edu/pub/cpan/
  ftp://mirror.its.uidaho.edu/cpan/

=item Illinois

  http://cpan.mirrors.hoobly.com/
  http://cpan.uchicago.edu/pub/CPAN/
  ftp://cpan.uchicago.edu/pub/CPAN/
  http://mirrors.servercentral.net/CPAN/
  http://www.stathy.com/CPAN/
  ftp://www.stathy.com/CPAN/

=item Indiana

  ftp://ftp.uwsg.iu.edu/pub/perl/CPAN/
  http://cpan.netnitco.net/
  ftp://cpan.netnitco.net/pub/mirrors/CPAN/
  http://ftp.ndlug.nd.edu/pub/perl/
  ftp://ftp.ndlug.nd.edu/pub/perl/

=item Massachusetts

  http://mirrors.ccs.neu.edu/CPAN/

=item Michigan

  http://ftp.wayne.edu/cpan/
  ftp://ftp.wayne.edu/cpan/

=item Minnesota

  http://cpan.msi.umn.edu/

=item New Jersey

  http://mirror.datapipe.net/CPAN/
  ftp://mirror.datapipe.net/pub/CPAN/

=item New York

  http://mirrors.24-7-solutions.net/pub/CPAN/
  ftp://mirrors.24-7-solutions.net/pub/CPAN/
  http://mirror.cc.columbia.edu/pub/software/cpan/
  ftp://mirror.cc.columbia.edu/pub/software/cpan/
  http://cpan.belfry.net/
  http://cpan.erlbaum.net/
  ftp://cpan.erlbaum.net/CPAN/
  http://cpan.hexten.net/
  ftp://cpan.hexten.net/
  ftp://mirror.nyi.net/CPAN/
  http://mirror.rit.edu/CPAN/
  ftp://mirror.rit.edu/CPAN/

=item North Carolina

  http://www.ibiblio.org/pub/mirrors/CPAN
  ftp://ftp.ncsu.edu/pub/mirror/CPAN/

=item Oregon

  http://ftp.osuosl.org/pub/CPAN/
  ftp://ftp.osuosl.org/pub/CPAN/

=item Pennsylvania

  http://ftp.epix.net/CPAN/
  ftp://ftp.epix.net/pub/languages/perl/
  http://cpan.pair.com/
  ftp://cpan.pair.com/pub/CPAN/

=item South Carolina

  http://cpan.mirror.clemson.edu/

=item Tennessee

  http://mira.sunsite.utk.edu/CPAN/

=item Texas

  http://mirror.uta.edu/CPAN

=item Utah

  ftp://mirror.xmission.com/CPAN/

=item Virginia

  http://cpan-du.viaverio.com/
  ftp://cpan-du.viaverio.com/pub/CPAN/
  http://perl.secsup.org/
  ftp://perl.secsup.org/pub/perl/
  ftp://mirror.cogentco.com/pub/CPAN/

=item Washington

  http://cpan.llarian.net/
  ftp://cpan.llarian.net/pub/CPAN/
  ftp://ftp-mirror.internap.com/pub/CPAN/

=item Wisconsin

  http://cpan.mirrors.tds.net
  ftp://cpan.mirrors.tds.net/pub/CPAN
  http://mirror.sit.wisc.edu/pub/CPAN/
  ftp://mirror.sit.wisc.edu/pub/CPAN/

=back

=back

=head2 Oceania

=over 4

=item Australia

  http://mirror.internode.on.net/pub/cpan/
  ftp://mirror.internode.on.net/pub/cpan/
  http://cpan.mirror.aussiehq.net.au/
  http://mirror.as24220.net/cpan/
  ftp://mirror.as24220.net/cpan/

=item New Zealand

  ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
  http://cpan.inspire.net.nz
  ftp://cpan.inspire.net.nz/cpan
  http://cpan.catalyst.net.nz/CPAN/
  ftp://cpan.catalyst.net.nz/pub/CPAN/

=back

=head2 South America

=over 4

=item Argentina

  http://cpan.patan.com.ar/
  http://cpan.localhost.net.ar
  ftp://mirrors.localhost.net.ar/pub/mirrors/CPAN

=item Brazil

  ftp://cpan.pop-mg.com.br/pub/CPAN/
  http://ftp.pucpr.br/CPAN
  ftp://ftp.pucpr.br/CPAN
  http://cpan.kinghost.net/

=item Chile

  http://cpan.dcc.uchile.cl/
  ftp://cpan.dcc.uchile.cl/pub/lang/cpan/

=item Colombia

  http://www.laqee.unal.edu.co/CPAN/

=back

=head2 RSYNC Mirrors

                      mirror.as24220.net::cpan
                      cpan.inode.at::CPAN
                      gd.tuwien.ac.at::CPAN
                      ftp.belnet.be::packages/cpan
                      rsync.linorg.usp.br::CPAN
                      rsync.arcticnetwork.ca::CPAN
                      CPAN.mirror.rafal.ca::CPAN
                      mirror.csclub.uwaterloo.ca::CPAN
                      theoryx5.uwinnipeg.ca::CPAN
                      www.laqee.unal.edu.co::CPAN
                      mirror.uni-c.dk::CPAN
                      rsync.nic.funet.fi::CPAN
                      rsync://distrib-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
                      mir1.ovh.net::CPAN
                      miroir-francais.fr::cpan
                      ftp.crihan.fr::CPAN
                      rsync://mirror.cict.fr/cpan/
                      rsync://mirror.netcologne.de/cpan/
                      ftp-stud.hs-esslingen.de::CPAN/
                      ftp.gwdg.de::FTP/languages/perl/CPAN/
                      cpan.mirror.iphh.net::CPAN
                      cpan.cpantesters.org::cpan
                      cpan.hu::CPAN
                      komo.vlsm.org::CPAN
                      mirror.unej.ac.id::cpan
                      ftp.esat.net::/pub/languages/perl/CPAN
                      ftp.heanet.ie::mirrors/ftp.perl.org/pub/CPAN
                      rsync.panu.it::CPAN
                      cpan.fastbull.org::CPAN
                      ftp.kddilabs.jp::cpan
                      ftp.nara.wide.ad.jp::cpan/
                      rsync://ftp.jaist.ac.jp/pub/CPAN/
                      rsync://ftp.riken.jp/cpan/
                      mirror.linuxiso.kz::CPAN
                      rsync://mirrors3.kernel.org/mirrors/CPAN/
                      rsync://rsync.osmirror.nl/cpan/
                      mirror.leaseweb.com::CPAN
                      cpan.nautile.nc::CPAN
                      mirror.icis.pcz.pl::CPAN
                      piotrkosoft.net::mirrors/CPAN
                      rsync://cpan.perl.pt/
                      ftp.kaist.ac.kr::cpan
                      cpan.sarang.net::CPAN
                      mirror.averse.net::cpan
                      rsync.oss.eznetsols.org
                      mirror.ac.za::cpan
                      ftp.is.co.za::IS-Mirror/ftp.cpan.org/
                      rsync://ftp.gui.uva.es/cpan/
                      rsync://mirrors4.kernel.org/mirrors/CPAN/
                      ftp.solnet.ch::CPAN
                      ftp.ulak.net.tr::CPAN
                      gafol.net::cpan
                      rsync.mirrorservice.org::ftp.funet.fi/pub/
                      rsync://rsync.mirror.8086.net/CPAN/
                      rsync.mirror.anlx.net::CPAN
                      mirror.bytemark.co.uk::CPAN
                      ftp.plig.net::CPAN
                      rsync://ftp.ticklers.org:CPAN/
                      mirrors.ibiblio.org::CPAN
                      cpan-du.viaverio.com::CPAN
                      mirror.hiwaay.net::CPAN
                      rsync://mira.sunsite.utk.edu/CPAN/
                      cpan.mirrors.tds.net::CPAN
                      mirror.its.uidaho.edu::cpan
                      rsync://mirror.cc.columbia.edu::cpan/
                      ftp.fxcorporate.com::CPAN
                      rsync.atlantic.net::CPAN
                      mirrors.kernel.org::mirrors/CPAN
                      rsync://mirrors2.kernel.org/mirrors/CPAN/
                      cpan.pair.com::CPAN
                      rsync://mirror.rit.edu/CPAN/
                      rsync://mirror.facebook.net/cpan/
                      rsync://mirrors1.kernel.org/mirrors/CPAN/
                      cpan-sj.viaverio.com::CPAN

For an up-to-date listing of CPAN sites,
see http://www.cpan.org/SITES or ftp://www.cpan.org/SITES .

=head1 Modules: Creation, Use, and Abuse

(The following section is borrowed directly from Tim Bunce's modules
file, available at your nearest CPAN site.)

Perl implements a class using a package, but the presence of a
package doesn't imply the presence of a class.  A package is just a
namespace.  A class is a package that provides subroutines that can be
used as methods.  A method is just a subroutine that expects, as its
first argument, either the name of a package (for "static" methods),
or a reference to something (for "virtual" methods).

A module is a file that (by convention) provides a class of the same
name (sans the .pm), plus an import method in that class that can be
called to fetch exported symbols.  This module may implement some of
its methods by loading dynamic C or C++ objects, but that should be
totally transparent to the user of the module.  Likewise, the module
might set up an AUTOLOAD function to slurp in subroutine definitions on
demand, but this is also transparent.  Only the F<.pm> file is required to
exist.  See L<perlsub>, L<perlobj>, and L<AutoLoader> for details about
the AUTOLOAD mechanism.

=head2 Guidelines for Module Creation

=over 4

=item  *

Do similar modules already exist in some form?

If so, please try to reuse the existing modules either in whole or
by inheriting useful features into a new class.  If this is not
practical try to get together with the module authors to work on
extending or enhancing the functionality of the existing modules.
A perfect example is the plethora of packages in perl4 for dealing
with command line options.

If you are writing a module to expand an already existing set of
modules, please coordinate with the author of the package.  It
helps if you follow the same naming scheme and module interaction
scheme as the original author.

=item  *

Try to design the new module to be easy to extend and reuse.

Try to C<use warnings;> (or C<use warnings qw(...);>).
Remember that you can add C<no warnings qw(...);> to individual blocks
of code that need less warnings.

Use blessed references.  Use the two argument form of bless to bless
into the class name given as the first parameter of the constructor,
e.g.,:

 sub new {
     my $class = shift;
     return bless {}, $class;
 }

or even this if you'd like it to be used as either a static
or a virtual method.

 sub new {
     my $self  = shift;
     my $class = ref($self) || $self;
     return bless {}, $class;
 }

Pass arrays as references so more parameters can be added later
(it's also faster).  Convert functions into methods where
appropriate.  Split large methods into smaller more flexible ones.
Inherit methods from other modules if appropriate.

Avoid class name tests like: C<die "Invalid" unless ref $ref eq 'FOO'>.
Generally you can delete the C<eq 'FOO'> part with no harm at all.
Let the objects look after themselves! Generally, avoid hard-wired
class names as far as possible.

Avoid C<< $r->Class::func() >> where using C<@ISA=qw(... Class ...)> and
C<< $r->func() >> would work.

Use autosplit so little used or newly added functions won't be a
burden to programs that don't use them. Add test functions to
the module after __END__ either using AutoSplit or by saying:

 eval join('',<main::DATA>) || die $@ unless caller();

Does your module pass the 'empty subclass' test? If you say
C<@SUBCLASS::ISA = qw(YOURCLASS);> your applications should be able
to use SUBCLASS in exactly the same way as YOURCLASS.  For example,
does your application still work if you change:  C<< $obj = YOURCLASS->new(); >>
into: C<< $obj = SUBCLASS->new(); >> ?

Avoid keeping any state information in your packages. It makes it
difficult for multiple other packages to use yours. Keep state
information in objects.

Always use B<-w>.

Try to C<use strict;> (or C<use strict qw(...);>).
Remember that you can add C<no strict qw(...);> to individual blocks
of code that need less strictness.

Always use B<-w>.

Follow the guidelines in L<perlstyle>.

Always use B<-w>.

=item  *

Some simple style guidelines

The perlstyle manual supplied with Perl has many helpful points.

Coding style is a matter of personal taste. Many people evolve their
style over several years as they learn what helps them write and
maintain good code.  Here's one set of assorted suggestions that
seem to be widely used by experienced developers:

Use underscores to separate words.  It is generally easier to read
$var_names_like_this than $VarNamesLikeThis, especially for
non-native speakers of English. It's also a simple rule that works
consistently with VAR_NAMES_LIKE_THIS.

Package/Module names are an exception to this rule. Perl informally
reserves lowercase module names for 'pragma' modules like integer
and strict. Other modules normally begin with a capital letter and
use mixed case with no underscores (need to be short and portable).

You may find it helpful to use letter case to indicate the scope
or nature of a variable. For example:

 $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
 $Some_Caps_Here  package-wide global/static
 $no_caps_here    function scope my() or local() variables

Function and method names seem to work best as all lowercase.
e.g., C<< $obj->as_string() >>.

You can use a leading underscore to indicate that a variable or
function should not be used outside the package that defined it.

=item  *

Select what to export.

Do NOT export method names!

Do NOT export anything else by default without a good reason!

Exports pollute the namespace of the module user.  If you must
export try to use @EXPORT_OK in preference to @EXPORT and avoid
short or common names to reduce the risk of name clashes.

Generally anything not exported is still accessible from outside the
module using the ModuleName::item_name (or C<< $blessed_ref->method >>)
syntax.  By convention you can use a leading underscore on names to
indicate informally that they are 'internal' and not for public use.

(It is actually possible to get private functions by saying:
C<my $subref = sub { ... };  &$subref;>.  But there's no way to call that
directly as a method, because a method must have a name in the symbol
table.)

As a general rule, if the module is trying to be object oriented
then export nothing. If it's just a collection of functions then
@EXPORT_OK anything but use @EXPORT with caution.

=item  *

Select a name for the module.

This name should be as descriptive, accurate, and complete as
possible.  Avoid any risk of ambiguity. Always try to use two or
more whole words.  Generally the name should reflect what is special
about what the module does rather than how it does it.  Please use
nested module names to group informally or categorize a module.
There should be a very good reason for a module not to have a nested name.
Module names should begin with a capital letter.

Having 57 modules all called Sort will not make life easy for anyone
(though having 23 called Sort::Quick is only marginally better :-).
Imagine someone trying to install your module alongside many others.

If you are developing a suite of related modules/classes it's good
practice to use nested classes with a common prefix as this will
avoid namespace clashes. For example: Xyz::Control, Xyz::View,
Xyz::Model etc. Use the modules in this list as a naming guide.

If adding a new module to a set, follow the original author's
standards for naming modules and the interface to methods in
those modules.

If developing modules for private internal or project specific use,
that will never be released to the public, then you should ensure
that their names will not clash with any future public module. You
can do this either by using the reserved Local::* category or by
using a category name that includes an underscore like Foo_Corp::*.

To be portable each component of a module name should be limited to
11 characters. If it might be used on MS-DOS then try to ensure each is
unique in the first 8 characters. Nested modules make this easier.

For additional guidance on the naming of modules, please consult:

    http://pause.perl.org/pause/query?ACTION=pause_namingmodules

or send mail to the <module-authors@perl.org> mailing list.

=item  *

Have you got it right?

How do you know that you've made the right decisions? Have you
picked an interface design that will cause problems later? Have
you picked the most appropriate name? Do you have any questions?

The best way to know for sure, and pick up many helpful suggestions,
is to ask someone who knows. The <module-authors@perl.org> mailing list
is useful for this purpose; it's also accessible via news interface as
perl.module-authors at nntp.perl.org.

All you need to do is post a short summary of the module, its
purpose and interfaces. A few lines on each of the main methods is
probably enough. (If you post the whole module it might be ignored
by busy people - generally the very people you want to read it!)

Don't worry about posting if you can't say when the module will be
ready - just say so in the message. It might be worth inviting
others to help you, they may be able to complete it for you!

=item  *

README and other Additional Files.

It's well known that software developers usually fully document the
software they write. If, however, the world is in urgent need of
your software and there is not enough time to write the full
documentation please at least provide a README file containing:

=over 10

=item *

A description of the module/package/extension etc.

=item *

A copyright notice - see below.

=item *

Prerequisites - what else you may need to have.

=item *

How to build it - possible changes to Makefile.PL etc.

=item *

How to install it.

=item *

Recent changes in this release, especially incompatibilities

=item *

Changes / enhancements you plan to make in the future.

=back

If the README file seems to be getting too large you may wish to
split out some of the sections into separate files: INSTALL,
Copying, ToDo etc.

=over 4

=item *

Adding a Copyright Notice.

How you choose to license your work is a personal decision.
The general mechanism is to assert your Copyright and then make
a declaration of how others may copy/use/modify your work.

Perl, for example, is supplied with two types of licence: The GNU GPL
and The Artistic Licence (see the files README, Copying, and Artistic,
or L<perlgpl> and L<perlartistic>).  Larry has good reasons for NOT
just using the GNU GPL.

My personal recommendation, out of respect for Larry, Perl, and the
Perl community at large is to state something simply like:

 Copyright (c) 1995 Your Name. All rights reserved.
 This program is free software; you can redistribute it and/or
 modify it under the same terms as Perl itself.

This statement should at least appear in the README file. You may
also wish to include it in a Copying file and your source files.
Remember to include the other words in addition to the Copyright.

=item  *

Give the module a version/issue/release number.

To be fully compatible with the Exporter and MakeMaker modules you
should store your module's version number in a non-my package
variable called $VERSION.  This should be a positive floating point
number with at least two digits after the decimal (i.e., hundredths,
e.g, C<$VERSION = "0.01">).  Don't use a "1.3.2" style version.
See L<Exporter> for details.

It may be handy to add a function or method to retrieve the number.
Use the number in announcements and archive file names when
releasing the module (ModuleName-1.02.tar.Z).
See perldoc ExtUtils::MakeMaker.pm for details.

=item  *

How to release and distribute a module.

It's good idea to post an announcement of the availability of your
module (or the module itself if small) to the comp.lang.perl.announce
Usenet newsgroup.  This will at least ensure very wide once-off
distribution.

If possible, register the module with CPAN.  You should
include details of its location in your announcement.

Some notes about ftp archives: Please use a long descriptive file
name that includes the version number. Most incoming directories
will not be readable/listable, i.e., you won't be able to see your
file after uploading it. Remember to send your email notification
message as soon as possible after uploading else your file may get
deleted automatically. Allow time for the file to be processed
and/or check the file has been processed before announcing its
location.

FTP Archives for Perl Modules:

Follow the instructions and links on:

   http://www.cpan.org/modules/00modlist.long.html
   http://www.cpan.org/modules/04pause.html

or upload to one of these sites:

   https://pause.kbx.de/pause/
   http://pause.perl.org/

and notify <modules@perl.org>.

By using the WWW interface you can ask the Upload Server to mirror
your modules from your ftp or WWW site into your own directory on
CPAN!

Please remember to send me an updated entry for the Module list!

=item  *

Take care when changing a released module.

Always strive to remain compatible with previous released versions.
Otherwise try to add a mechanism to revert to the
old behavior if people rely on it.  Document incompatible changes.

=back

=back

=head2 Guidelines for Converting Perl 4 Library Scripts into Modules

=over 4

=item  *

There is no requirement to convert anything.

If it ain't broke, don't fix it! Perl 4 library scripts should
continue to work with no problems. You may need to make some minor
changes (like escaping non-array @'s in double quoted strings) but
there is no need to convert a .pl file into a Module for just that.

=item  *

Consider the implications.

All Perl applications that make use of the script will need to
be changed (slightly) if the script is converted into a module.  Is
it worth it unless you plan to make other changes at the same time?

=item  *

Make the most of the opportunity.

If you are going to convert the script to a module you can use the
opportunity to redesign the interface.  The guidelines for module
creation above include many of the issues you should consider.

=item  *

The pl2pm utility will get you started.

This utility will read *.pl files (given as parameters) and write
corresponding *.pm files. The pl2pm utilities does the following:

=over 10

=item *

Adds the standard Module prologue lines

=item *

Converts package specifiers from ' to ::

=item *

Converts die(...) to croak(...)

=item *

Several other minor changes

=back

Being a mechanical process pl2pm is not bullet proof. The converted
code will need careful checking, especially any package statements.
Don't delete the original .pl file till the new .pm one works!

=back

=head2 Guidelines for Reusing Application Code

=over 4

=item  *

Complete applications rarely belong in the Perl Module Library.

=item  *

Many applications contain some Perl code that could be reused.

Help save the world! Share your code in a form that makes it easy
to reuse.

=item  *

Break-out the reusable code into one or more separate module files.

=item  *

Take the opportunity to reconsider and redesign the interfaces.

=item  *

In some cases the 'application' can then be reduced to a small

fragment of code built on top of the reusable modules. In these cases
the application could invoked as:

     % perl -e 'use Module::Name; method(@ARGV)' ...
or
     % perl -mModule::Name ...    (in perl5.002 or higher)

=back

=head1 NOTE

Perl does not enforce private and public parts of its modules as you may
have been used to in other languages like C++, Ada, or Modula-17.  Perl
doesn't have an infatuation with enforced privacy.  It would prefer
that you stayed out of its living room because you weren't invited, not
because it has a shotgun.

The module and its user have a contract, part of which is common law,
and part of which is "written".  Part of the common law contract is
that a module doesn't pollute any namespace it wasn't asked to.  The
written contract for the module (A.K.A. documentation) may make other
provisions.  But then you know when you C<use RedefineTheWorld> that
you're redefining the world and willing to take the consequences.

=cut

read_only_bottom_close_and_rename($out);
